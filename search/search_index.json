{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CRIPT Documentation \u00b6 CRIPT (A Community Resource for Innovation in Polymer Technology) is an ecosystem of data standards, web-based applications, and software frameworks for polymers. It is being developed by a collaborative team from MIT, NIST, Citrine Informatics, and Dow Chemicals. For more information about the project, please visit cript.mit.edu .","title":"Home"},{"location":"#cript-documentation","text":"CRIPT (A Community Resource for Innovation in Polymer Technology) is an ecosystem of data standards, web-based applications, and software frameworks for polymers. It is being developed by a collaborative team from MIT, NIST, Citrine Informatics, and Dow Chemicals. For more information about the project, please visit cript.mit.edu .","title":"CRIPT Documentation"},{"location":"about/","text":"Under Construction \u00b6","title":"Under Construction"},{"location":"about/#under-construction","text":"","title":"Under Construction"},{"location":"data-models/","text":"Overview \u00b6 As part of CRIPT's mission to develop a digital ecosystem for polymers, there was a need to generate a standard data model and schema to share polymer data. The following documentation details the way in which polymer data is represented and stored and within the CRIPT ecosystem. Importance \u00b6 Having accessible well-structured data is the foundation of cheminformatics. The complexity of polymer structures with the wide range of characterization techniques and properties poses significant challenges in the formation of databases. This has led to several small, disparate data sets. The data structure presented here provides a universal system to capture all relevant polymer data in a manner optimized for large databases. It is designed to allow anyone to contribute for the benefit of the polymer community; with the goal of accelerating the pace of material innovation. Value Proposition: Archiving system Eliminate the loss of data Saves money and time on replicating experiments Promotes good data recording practices Uniform structure Reduce time spent searching for data Increases completeness of data entered Effortless data sharing Gain access to large well structure data Enables machine learning and large data analytics Philosophy \u00b6 Reporting Guidelines \u00b6 Reporting guidelines refers to what information is required to be captured about an experiment. CRIPT has been designed with minimal reporting requirements as polymer data is highly variable in content and completeness. However, contributors of data are encouraged to provide as much data as possible as it ensures the polymer data has sufficient information to contextualize the data. Additionally, the more information provided will aid in the discoverability of the data. More specific reporting guidance can be found in the following documents. Vocabulary \u00b6 Vocabulary (controlled) is the set of terminology that provides unique identification and definition of datum. CRIPT provide an expert curated vocabulary for polymer data. Contributors are highly encouraged to stick to the official vocabulary when possible, as it ensures data uniformity. Data uniformity is necessary for successful exchange information, search, and data retrieval. CRIPT recognizes that the current vocabulary may not cover all polymer data that contributors desire to add to the database, thus CRIPT accepts any user-defined vocabulary such that it begins with a + . Contributors can petition for the addition of new official vocabulary by emailing cript@mit.edu with the term, brief description, preferred units, and explanation of why it should be added to the official vocabulary. Data exchange format \u00b6 Data exchange format is the specification of how data is encoded to be a computer-readable and -processable format. CRIPT structures data is formatted as a JSON files which are stored in MongoDB as BSON (a byte version of JSON). Thus, BSON data types are used. Data Schema \u00b6 Data Schema refers to the organization of key objects and entities, and their relationships. Data schemas are independent of the database implementation. CRIPT's data schema was designed to link together polymer materials, the processes that produced them, and the associated data that characterize them in a graph. This enables the comprehensive store of all aspects of polymer data and a descriptive visualization. There are four key objects (or nodes): Material, Process, Sample, Data. These nodes were designed to represent the fundamental objects of polymer material research. Additionally, a Model object is part of the data schema which provides a means to transform data. Data Model \u00b6 Data Model refers to a specific implementation of a data schema into a database. A data model includes additional consideration with regard to app design, hardware use, and additional features. CRIPT's data model is an explicit embodiment of the data schema for a document based database, specifically Mongodb . The current data model is structured as a directed acyclic graph (DAG). Version Control \u00b6 Version control is a system that records changes to a file or data entry over time so that you can recall specific versions later. The CRIPT database implements data version control as it provides a complete long-term change history of every file. This benefits science by increasing data transparency and minimizes the re-analysis or processing of data.","title":"Overview"},{"location":"data-models/#overview","text":"As part of CRIPT's mission to develop a digital ecosystem for polymers, there was a need to generate a standard data model and schema to share polymer data. The following documentation details the way in which polymer data is represented and stored and within the CRIPT ecosystem.","title":"Overview"},{"location":"data-models/#importance","text":"Having accessible well-structured data is the foundation of cheminformatics. The complexity of polymer structures with the wide range of characterization techniques and properties poses significant challenges in the formation of databases. This has led to several small, disparate data sets. The data structure presented here provides a universal system to capture all relevant polymer data in a manner optimized for large databases. It is designed to allow anyone to contribute for the benefit of the polymer community; with the goal of accelerating the pace of material innovation. Value Proposition: Archiving system Eliminate the loss of data Saves money and time on replicating experiments Promotes good data recording practices Uniform structure Reduce time spent searching for data Increases completeness of data entered Effortless data sharing Gain access to large well structure data Enables machine learning and large data analytics","title":"Importance"},{"location":"data-models/#philosophy","text":"","title":"Philosophy"},{"location":"data-models/#reporting-guidelines","text":"Reporting guidelines refers to what information is required to be captured about an experiment. CRIPT has been designed with minimal reporting requirements as polymer data is highly variable in content and completeness. However, contributors of data are encouraged to provide as much data as possible as it ensures the polymer data has sufficient information to contextualize the data. Additionally, the more information provided will aid in the discoverability of the data. More specific reporting guidance can be found in the following documents.","title":"Reporting Guidelines"},{"location":"data-models/#vocabulary","text":"Vocabulary (controlled) is the set of terminology that provides unique identification and definition of datum. CRIPT provide an expert curated vocabulary for polymer data. Contributors are highly encouraged to stick to the official vocabulary when possible, as it ensures data uniformity. Data uniformity is necessary for successful exchange information, search, and data retrieval. CRIPT recognizes that the current vocabulary may not cover all polymer data that contributors desire to add to the database, thus CRIPT accepts any user-defined vocabulary such that it begins with a + . Contributors can petition for the addition of new official vocabulary by emailing cript@mit.edu with the term, brief description, preferred units, and explanation of why it should be added to the official vocabulary.","title":"Vocabulary"},{"location":"data-models/#data-exchange-format","text":"Data exchange format is the specification of how data is encoded to be a computer-readable and -processable format. CRIPT structures data is formatted as a JSON files which are stored in MongoDB as BSON (a byte version of JSON). Thus, BSON data types are used.","title":"Data exchange format"},{"location":"data-models/#data-schema","text":"Data Schema refers to the organization of key objects and entities, and their relationships. Data schemas are independent of the database implementation. CRIPT's data schema was designed to link together polymer materials, the processes that produced them, and the associated data that characterize them in a graph. This enables the comprehensive store of all aspects of polymer data and a descriptive visualization. There are four key objects (or nodes): Material, Process, Sample, Data. These nodes were designed to represent the fundamental objects of polymer material research. Additionally, a Model object is part of the data schema which provides a means to transform data.","title":"Data Schema"},{"location":"data-models/#data-model","text":"Data Model refers to a specific implementation of a data schema into a database. A data model includes additional consideration with regard to app design, hardware use, and additional features. CRIPT's data model is an explicit embodiment of the data schema for a document based database, specifically Mongodb . The current data model is structured as a directed acyclic graph (DAG).","title":"Data Model"},{"location":"data-models/Collections/","text":"Collections \u00b6 The 'collection' node also for the grouping of experiments. Their purpose is to provide a hierarchical organization to non-linear, but related, processes (like running multiple reactions for optimizations, kinetics, etc.). For linear processes (like block copolymer synthesis) consider grouping it within a single experiment. Features: collections within collections are allowed (max depth 20) collection can reference experiments, collections required information name optional information experiments (CRIPT node) child collection (CRIPT node) notes auto-generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) number_experiments App features to support this node: a page to fill out collection details a tool to look up experiments, or enter _id a similar look up tool for users, and groups allow additional optional information in attribute section given that it begins with + JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"coll\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date_created\" : da tet ime , \"date_last_mod\" : da tet ime , \"name\" : s tr i n g , \"number_experiments\" : i ntera ger , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of collection number_experiments int auto-generated number of experiments in collection Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description experiment list[dict] experiment nodes experiment\\_id objectId() id of experiment experiment\\name string name of experiment experiment\\created datetime date the experiment was created child_collection list[dict] collection nodes child_collection\\_id objectId() id of collection child_collection\\name string name of collection child_collection\\created datetime date collection created note string free-form space to store any text Example \u00b6 Collection Example","title":"Collections"},{"location":"data-models/Collections/#collections","text":"The 'collection' node also for the grouping of experiments. Their purpose is to provide a hierarchical organization to non-linear, but related, processes (like running multiple reactions for optimizations, kinetics, etc.). For linear processes (like block copolymer synthesis) consider grouping it within a single experiment. Features: collections within collections are allowed (max depth 20) collection can reference experiments, collections required information name optional information experiments (CRIPT node) child collection (CRIPT node) notes auto-generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) number_experiments App features to support this node: a page to fill out collection details a tool to look up experiments, or enter _id a similar look up tool for users, and groups allow additional optional information in attribute section given that it begins with +","title":"Collections"},{"location":"data-models/Collections/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"coll\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date_created\" : da tet ime , \"date_last_mod\" : da tet ime , \"name\" : s tr i n g , \"number_experiments\" : i ntera ger , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Collections/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of collection number_experiments int auto-generated number of experiments in collection","title":"Description"},{"location":"data-models/Collections/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description experiment list[dict] experiment nodes experiment\\_id objectId() id of experiment experiment\\name string name of experiment experiment\\created datetime date the experiment was created child_collection list[dict] collection nodes child_collection\\_id objectId() id of collection child_collection\\name string name of collection child_collection\\created datetime date collection created note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Collections/#example","text":"Collection Example","title":"Example"},{"location":"data-models/Data/","text":"Data \u00b6 The 'data' node contains data related to raw or processed data. This can be an NMR fid, SEC trace, molecular weight distribution, or stress-strain curve. Features: data nodes points only to raw data files required information name type source optional information file file type sample preparation instrument details calibration data history note auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: a page to plot, analyze data (csv or data ) allow additional optional information in attribute section given that it begins with + units are not stored and all official values are converted to database standard prior to storage JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"data\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date_created\" : da tet ime , \"date_last_mod\" : da tet ime , \"name\" : s tr i n g , \"type\" : lis t [ s tr i n g ], \"source\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" date_created datetime auto datetime created date_last_mod datetime auto last modified datetime name string required name of data type list[string] required type of data, see options below source string required source of data [expt, proc, comp] experiment, processed data, computed data Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Data can either be linked through file or placed directly in the document with data . data is restricted to #### total data points. total data points = row * col Key Data Type Description file list[dict] link to raw file file/_id objectId() id for file file/type string file type (ex. csv, txt, xlsm) file/dis string description web_link string raw data may be store on another website and can be linked here sample_preparation string description of sample preparation equipment list[dict] equipment or instrument details/configuration equipment/_id objectId() id for file equipment/type string file type (ex. csv, txt, xlsm) equipment/description string description calibration list[dict] calibration details calibration/_id objectId() id for file calibration/type string file type (ex. csv, txt, xlsm) calibration/description string description data dict data information data/label list[list[string]] labels for data first list is for each dimension of data [row, column, 3rd dimension, ...], the second list is for the labels in that dimension (order should match data) data/unit list[list[string]] units for data first list is for each dimension of data [row, column, 3rd dimension, ...], the second list is for the labels in that dimension (order should match data) history dict data history (feature under construction) note string free-form space to store any text Type \u00b6 1D data \u00b6 type x-axis x-axis unit y-axis y-axis unit Description rxn_conv time min conversion reaction conversion vs time mn_conv conversion m_n g/mol M_n vs monomer conversion mwd molecular weight g/mol population mol frac molecular weight distribution (by mole) mwd_wt molecular weight g/mol population wt frac molecular weight distribution (by weight) sec_trace retention time min signal SEC trace (by retention time) sec_trace_vol elution vol. ml signal SEC trace (by elution volume) nmr time us voltage V Free induction decay nmr_h1 chemical shift ppm signal proton NMR (H1 NMR) nmr_c13 chemical shift ppm signal carbon NMR (C13 NMR) nmr_n15 chemical shift ppm signal nitrogen NMR (N15 NMR) nmr_o17 chemical shift ppm signal oxygen NMR (O17 NMR) nmr_f19 chemical shift ppm signal fluorine NMR (F19 NMR) nmr_si29 chemical shift ppm signal silicon NMR (Si29 NMR) nmr_p31 chemical shift ppm signal phosphorous NMR (P31 NMR) nmr_noe chemical shift ppm signal nuclear Overhauser effect NMR nmr_tocsy chemical shift ppm signal total correlation spectroscopy NMR ir wavenumber cm**-1 signal infrared spectroscopy stess_st stess kPa strain stress strain curve waxs q angstrom**-1 intensity wide angle light scattering saxs q angstrom**-1 intensity small angle light scattering g_prime frequency rad/s stress Pa storage modulus g_doub_prime frequency rad/s stress Pa loss modulus 2D data \u00b6 type x-axis x-axis unit y-axis y-axis unit z-axis z-axis unit Description nmr_cosy chemical shift ppm chemical shift ppm signal correlation spectroscopy NMR (H - H) nmr_hsqc chemical shift ppm chemical shift ppm signal heteronuclear single-quantum correlation spectroscopy NMR (H - C) nmr_hmbc chemical shift ppm chemical shift ppm signal heteronuclear multiple-bond correlation spectroscopy NMR (H - C) nmr_dosy chemical shift ppm diffusion coeff. m**2/s signal Diffusion NMR nmr_kinetics chemical shift ppm time min signal NMR kinetic array waxs_i distance nm**-1 distance nm**-1 signal wide angle light scattering image saxs_i distance nm**-1 distance nm**-1 signal small angle light scattering image s_neutron distance nm**-1 distance nm**-1 signal small angle neutron scattering image tem_height distance nm distance nm height nm Transmission electron microscopy height map afm_height distance nm distance nm height nm Atomic Force Microscope height map afm_amp distance nm distance nm amplitude nm Atomic Force Microscope amplitude map afm_phase distance nm distance nm phase deg Atomic Force Microscope phase map n-D data \u00b6 type x-axis x-axis unit y-axis y-axis unit Description Other data \u00b6 type Description photo general images Conditions \u00b6 \"conditions\" : [ { \"key\" : s tr i n g , \"value\" : double , \"unit\" : s tr i n g , \"uncer\" : double , \"_id\" : Objec t ID , \"name\" : s tr i n g } ] Key Units Location Description time min value time temperature degC value temperature pressure kPa value pressure (absolute) solvent none _id, name solvent; material node standard none _id, name measurement standard (ASTM, ISO) Data history \u00b6 Under construction Example \u00b6 Example","title":"Data"},{"location":"data-models/Data/#data","text":"The 'data' node contains data related to raw or processed data. This can be an NMR fid, SEC trace, molecular weight distribution, or stress-strain curve. Features: data nodes points only to raw data files required information name type source optional information file file type sample preparation instrument details calibration data history note auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: a page to plot, analyze data (csv or data ) allow additional optional information in attribute section given that it begins with + units are not stored and all official values are converted to database standard prior to storage","title":"Data"},{"location":"data-models/Data/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"data\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date_created\" : da tet ime , \"date_last_mod\" : da tet ime , \"name\" : s tr i n g , \"type\" : lis t [ s tr i n g ], \"source\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Data/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" date_created datetime auto datetime created date_last_mod datetime auto last modified datetime name string required name of data type list[string] required type of data, see options below source string required source of data [expt, proc, comp] experiment, processed data, computed data","title":"Description"},{"location":"data-models/Data/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Data can either be linked through file or placed directly in the document with data . data is restricted to #### total data points. total data points = row * col Key Data Type Description file list[dict] link to raw file file/_id objectId() id for file file/type string file type (ex. csv, txt, xlsm) file/dis string description web_link string raw data may be store on another website and can be linked here sample_preparation string description of sample preparation equipment list[dict] equipment or instrument details/configuration equipment/_id objectId() id for file equipment/type string file type (ex. csv, txt, xlsm) equipment/description string description calibration list[dict] calibration details calibration/_id objectId() id for file calibration/type string file type (ex. csv, txt, xlsm) calibration/description string description data dict data information data/label list[list[string]] labels for data first list is for each dimension of data [row, column, 3rd dimension, ...], the second list is for the labels in that dimension (order should match data) data/unit list[list[string]] units for data first list is for each dimension of data [row, column, 3rd dimension, ...], the second list is for the labels in that dimension (order should match data) history dict data history (feature under construction) note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Data/#type","text":"","title":"Type"},{"location":"data-models/Data/#conditions","text":"\"conditions\" : [ { \"key\" : s tr i n g , \"value\" : double , \"unit\" : s tr i n g , \"uncer\" : double , \"_id\" : Objec t ID , \"name\" : s tr i n g } ] Key Units Location Description time min value time temperature degC value temperature pressure kPa value pressure (absolute) solvent none _id, name solvent; material node standard none _id, name measurement standard (ASTM, ISO)","title":"Conditions"},{"location":"data-models/Data/#data-history","text":"Under construction","title":"Data history"},{"location":"data-models/Data/#example","text":"Example","title":"Example"},{"location":"data-models/Data_Entry/","text":"Data Schema Explained \u00b6 The data schema consists of 4 main nodes: Material: contains identity and property data for a chemical Process: contains ingredient list, quantities, and procedure information Sample: contains procedure and property information Data: contains raw or processed data These 4 nodes contain all the relevant polymer information. The fifth node 'models' contains functions which transform raw data to processed data or properties. Data Model Explained \u00b6 The data model provides a specific implementation of the data schema, and additional features. In particular, it adds several organizational nodes: User: contains information about an individual using the database Group: contains information about group and ownership of collections and experiments lies with groups Collection: are groups of experiments or other collections Publication: contains collections which embodies a literature publication Experiment: are a set of Process, Material, Sample, Data nodes It also adds to locations to handle data and models: Data Lake: location of all raw data files Model Lake: collection of data transformation and analysis tools A new user joining the CRIPT ecosystem will result in the creation of a new user node. The user can then either create a new group or join an existing group. If a new group is formed then a new collection will be made in which the first experiment can be placed into. If a user is joining an existing group, the user will have access to all collections and embedded experiments the group has ownership of. Collections can be turned into publications which removes all write capabilities for any embedded document.","title":"Data Model Explained"},{"location":"data-models/Data_Entry/#data-schema-explained","text":"The data schema consists of 4 main nodes: Material: contains identity and property data for a chemical Process: contains ingredient list, quantities, and procedure information Sample: contains procedure and property information Data: contains raw or processed data These 4 nodes contain all the relevant polymer information. The fifth node 'models' contains functions which transform raw data to processed data or properties.","title":"Data Schema Explained"},{"location":"data-models/Data_Entry/#data-model-explained","text":"The data model provides a specific implementation of the data schema, and additional features. In particular, it adds several organizational nodes: User: contains information about an individual using the database Group: contains information about group and ownership of collections and experiments lies with groups Collection: are groups of experiments or other collections Publication: contains collections which embodies a literature publication Experiment: are a set of Process, Material, Sample, Data nodes It also adds to locations to handle data and models: Data Lake: location of all raw data files Model Lake: collection of data transformation and analysis tools A new user joining the CRIPT ecosystem will result in the creation of a new user node. The user can then either create a new group or join an existing group. If a new group is formed then a new collection will be made in which the first experiment can be placed into. If a user is joining an existing group, the user will have access to all collections and embedded experiments the group has ownership of. Collections can be turned into publications which removes all write capabilities for any embedded document.","title":"Data Model Explained"},{"location":"data-models/Data_Lake/","text":"Data Lake \u00b6 The data lake is just a storage location for external files. Files like photos, Execl documents, csv files, etc. Files in the data lake are linked to the data node.","title":"Data Lake"},{"location":"data-models/Data_Lake/#data-lake","text":"The data lake is just a storage location for external files. Files like photos, Execl documents, csv files, etc. Files in the data lake are linked to the data node.","title":"Data Lake"},{"location":"data-models/Example/","text":"Example \u00b6 To show how the data schema can be implemented, we will go through an example. We start by creating a user, group, and collection. Then we will create several real-world experiments. User, Group, Collection \u00b6 For a new user, the first step that needs to be done is to create a 'user'. Once the 'user' is created, then the user can either join an existing 'group' or create a new 'group'. Typically, 'groups' are created and own by a supervisor since 'groups' maintain ownership over 'collections'/'experiments' (such as a principal investigator for an academic lab). In this example, we will create a new 'group' named: \"CRIPT Team\". With a 'user' now in a 'group', we can create a 'collection' that will hold the experiments. User \u00b6 User node { \"_id\" : \"607f1720633b3e6e70e529c7\" , \"class\" : \"user\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:07:57\" , \"created\" : \"2021-04-20 18:02:08\" , \"name\" : \"Dylan W\" , \"email\" : \"dylan@cript.edu\" , \"owns_groups\" : [{ \"_id\" : \"607f180c633b3e6e70e529c8\" , \"name\" : \"CRIPT Team\" }], \"in_groups\" : [ { \"_id\" : \"607f180c633b3e6e70e529c8\" , \"name\" : \"MIT\" }, { \"_id\" : \"607f180c633b3e6e70e529c7\" , \"name\" : \"Olsen Lab\" } ], \"publication\" : [ { \"_id\" : \"507f191e810c19729de860eq\" , \"name\" : \"Recent trends in catalytic polymerizations\" }, { \"_id\" : \"507f191e810c19729de860er\" , \"name\" : \"Kinetic study of living ring-opening metathesis polymerization with third-generation Grubbs catalysts\" } ], \"orcid\" : \"0000-0000-0000-0001\" , \"organization\" : \"Mass. Institute of Technology\" , \"position\" : \"Research Assistant\" } Group \u00b6 Group node { \"_id\" : \"607f180c633b3e6e70e529c8\" , \"class\" : \"group\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"507f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"CRIPT Team\" , \"collection\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"CRIPT Demo\" , \"created\" : \"2021-04-20 18:06:04\" } ], \"parent_group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Olsen Lab\" }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"Citrine\" } ], \"publication\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"Synthesis of new polymer\" } ], \"website\" : \"https://cript.mit.edu/\" , \"email\" : \"cript@mit.edu\" } Collection \u00b6 Collection node { \"_id\" : \"607f180c633b3e6e70e529c8\" , \"class\" : \"coll\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"507f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"CRIPT Demo\" , \"number_experiments\" : 2 , \"experiment\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Anionic polymerization of styrene\" , \"created\" : \"2021-04-20 18:06:04\" }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"Diblock bottlebrush synthesis and assembly\" , \"created\" : \"2021-04-20 18:06:04\" } ], \"child_collection\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Kinetic analysis of ROMP\" , \"created\" : \"2021-04-20 18:06:04\" } ] } Experiments \u00b6 When defining an experiment it is best to start with the ingredient material nodes, followed by process, data nodes. After that the final product material node can be defined, followed by the experiment node. Experiment 1: Anionic polymerization of styrene \u00b6 The following example is the anionic polymerization of styrene with secBuLi in a mixture of THF and Toluene. The reaction is then quenched with butanol and precipitated into methanol to obtain the final product, polystyrene. Following the above suggestions, we can start by defining the ingredient material nodes. Both styrene and secbuli solution are written out below. These materials nodes contain information with regard to identity (name, SMILES string, CAS number), and properties (molecular weight, boiling point, etc.). The second node to be defined will be a process node. The process node contains links to the ingredient material nodes as well as the quantities of each material used in the polymerization. The polymerization node also contains experimental procedure details and conditions under which the process was preformed under (reaction time, temperature). Next the data nodes can be defined, in which both a 1 H NMR and SEC analysis was preformed to get M n and dispersity. Finally, we can define the product material node, polystyrene. Here we can include the same identity, property data. All these nodes then are referenced in an experimental node. Experiment node \u00b6 Experiment node { \"_id\" : \"507f191e810c19729de860ec\" , \"class\" : \"expt\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"507f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"Anionic polymerization of styrene\" , \"nodes\" : { \"materials\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"SecBuLi\" }, { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"toluene\" }, { \"_id\" : \"507f191e810c19729de860ee\" , \"name\" : \"styrene\" }, { \"_id\" : \"507f191e810c19729de860eg\" , \"name\" : \"THF\" }, { \"_id\" : \"507f191e810c19729de860eh\" , \"name\" : \"butanol\" }, { \"_id\" : \"507f191e810c19729de860ei\" , \"name\" : \"methanol\" }, { \"_id\" : \"507f191e810c19729de860ef\" , \"name\" : \"polystyrene\" , \"id_proc\" : \"507f191e810c19729de860pe\" , \"id_data\" :[ \"507f191e810c19729de860md\" , \"507f191e810c19729de860me\" ] } ], \"process\" : [ { \"_id\" : \"507f191e810c19729de860pe\" , \"name\" : \"anionic polymerization\" , \"id_mat\" : [ \"507f191e810c19729de860ec\" , \"507f191e810c19729de860ed\" , \"507f191e810c19729de860ee\" , \"507f191e810c19729de860eg\" , \"507f191e810c19729de860eh\" , \"507f191e810c19729de860ei\" ] } ], \"data\" : [ { \"_id\" : \"507f191e810c19729de860md\" , \"name\" : \"1H NMR\" }, { \"_id\" : \"507f191e810c19729de860me\" , \"name\" : \"SEC\" } ] }, \"reference\" : \"10.1139/v60-254\" } Material node \u00b6 Material node other Material node polymers The following materials nodes: styrene secBuLi solution polystyrene { \"_id\" : \"507f191e810c19729de860ee\" , \"class\" : \"material_p\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"styrene\" , \"identifiers\" : [ { \"mat_id\" : 1 , \"pref_name\" : \"styrene\" , \"names\" : [ \"styrene\" , \"vinylbenzene\" , \"phenylethylene\" , \"ethenylbenzene\" ], \"chem_form\" : \"C8H8\" , \"smiles\" : \"C=Cc1ccccc1\" , \"cas\" : \"100-42-5\" , \"pubChem_cid\" : \"7501 \" , \"inchi_key\" : \"PPBRXRYQALVLMV-UHFFFAOYSA-N\" } ], \"properties\" : [ { \"mat_id\" : 0 , \"key\" : \"phase\" , \"value\" : \"liquid\" }, { \"mat_id\" : 0 , \"key\" : \"color\" , \"value\" : \"colorless\" }, { \"mat_id\" : 0 , \"key\" : \"mw\" , \"method\" : \"prescribed\" , \"value\" : 104.15 }, { \"mat_id\" : 0 , \"key\" : \"density\" , \"value\" : 0.906 , \"conditions\" : [{ \"key\" : \"temperature\" , \"value\" : 25 }] }, { \"mat_id\" : 0 , \"key\" : \"bp\" , \"value\" : 145 , \"conditions\" : [{ \"key\" : \"pressure\" , \"value\" : 101 }] }, { \"mat_id\" : 0 , \"key\" : \"mp\" , \"value\" : -30 , \"conditions\" : [{ \"key\" : \"pressure\" , \"value\" : 101 }] }, { \"mat_id\" : 0 , \"key\" : \"solubility\" , \"value\" : 0.3 , \"conditions\" : [ { \"key\" : \"solvent\" , \"_id\" : \"607f191e810c19729de860ea\" , \"name\" : \"water\" }, { \"key\" : \"temperature\" , \"value\" : 20 } ] }, { \"mat_id\" : 0 , \"key\" : \"vapor_pres\" , \"value\" : 0.666 , \"conditions\" : [{ \"key\" : \"temperature\" , \"value\" : 20 }] } ], \"keywords\" : [ \"styrene\" ], \"source\" : \"Sigma-Aldrich\" , \"storage\" : { \"temp\" : -20 , \"atm\" : \"argon\" } } { \"_id\" : \"507f191e810c19729de860ec\" , \"class\" : \"material_p\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860ew\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"SecBuLi solution\" , \"identifiers\" : [ { \"mat_id\" : 1 , \"pref_name\" : \"sec-butyllithium\" , \"names\" : [ \"sec-butyllithium\" , \"lithium-2-butanide\" , \"SecBuLi\" , \"sBuLi\" ], \"chem_form\" : \"C4H9Li1\" , \"smiles\" : \"[Li]C(C)CC\" , \"cas\" : \"598-30-1\" , \"pubChem_cid\" : \"102446 \" }, { \"mat_id\" : 2 , \"pref_name\" : \"cyclohexane\" , \"_id\" : \"607f191e810c19729de860es\" } ], \"properties\" : [ { \"mat_id\" : 0 , \"key\" : \"phase\" , \"value\" : \"liquid\" }, { \"mat_id\" : 0 , \"key\" : \"color\" , \"value\" : \"white\" }, { \"mat_id\" : 1 , \"key\" : \"mw\" , \"method\" : \"prescribed\" , \"value\" : 64.06 }, { \"mat_id\" : 0 , \"key\" : \"density\" , \"value\" : 0.769 , \"conditions\" : [{ \"key\" : \"temperature\" , \"value\" : 25 }] }, { \"mat_id\" : 1 , \"key\" : \"conc\" , \"value\" : 1.4 } ], \"source\" : \"Sigma-Aldrich\" , \"storage\" : { \"temp\" : 2 , \"atm\" : \"argon\" } } { \"_id\" : \"507f191e810c19729de860ef\" , \"class\" : \"material_p\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860et\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"polystyrene\" , \"identifiers\" : [ { \"mat_id\" : 1 , \"pref_name\" : \"poly(styrene)\" , \"names\" : [ \"poly(styrene)\" , \"poly(vinylbenzene)\" ], \"chem_repeat\" : [ \"C8H8\" ], \"bigsmiles\" : \"[H]{[>][<]C(C[>])c1ccccc1[<]}C(C)CC\" , \"cas\" : \"100-42-5\" } ], \"process\" : { \"_id\" : \"507f191e810c19729de860pe\" , \"name\" : \"anionic polymerization\" }, \"properties\" : [ { \"mat_id\" : 0 , \"key\" : \"m_n\" , \"method\" : \"nmr\" , \"value\" : 4800 , \"uncer\" : 400 , \"data_id\" : \"507f191e810c19729de860em\" }, { \"mat_id\" : 0 , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5200 , \"uncer\" : 100 , \"data_id\" : \"507f191e810c19729de860er\" }, { \"mat_id\" : 0 , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860er\" } ] } Process node \u00b6 Process node { \"_id\" : \"507f191e810c19729de860pe\" , \"class\" : \"process\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860et\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"anionic polymerization\" , \"ingredients\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"SecBuLi\" , \"type\" : \"initiator\" , \"quantities\" : [ { \"key\" : \"volume\" , \"value\" : 0.017 }, { \"key\" : \"mole\" , \"value\" : 0.022 }, { \"key\" : \"equivalence\" , \"value\" : 1 } ] }, { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"toluene\" , \"type\" : \"solvent\" , \"quantities\" : [ { \"key\" : \"mass\" , \"value\" : 8.7 }, { \"key\" : \"volume\" , \"value\" : 10 }, { \"key\" : \"mole\" , \"value\" : 94.4 }, { \"key\" : \"equivalence\" , \"value\" : 4234 } ] }, { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"styrene\" , \"type\" : \"monomer\" , \"quantities\" : [ { \"key\" : \"mass\" , \"value\" : 0.455 }, { \"key\" : \"volume\" , \"value\" : 0.5 }, { \"key\" : \"mole\" , \"value\" : 4.27 }, { \"key\" : \"equivalence\" , \"value\" : 191.5 } ] }, { \"_id\" : \"507f191e810c19729de860eg\" , \"name\" : \"THF\" , \"type\" : \"solvent\" , \"quantities\" : [ { \"key\" : \"mass\" , \"value\" : 3.28 }, { \"key\" : \"volume\" , \"value\" : 3.7 }, { \"key\" : \"mole\" , \"value\" : 45.5 }, { \"key\" : \"equivalence\" , \"value\" : 2042 } ] }, { \"_id\" : \"507f191e810c19729de860eh\" , \"name\" : \"butanol\" , \"type\" : \"quench\" }, { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"methanol\" , \"type\" : \"workup\" } ], \"procedure\" : \"In an argon filled glovebox, a round bottom flask was filled with 216 ml of dried toluene. The solution of secBuLi (3 ml, 3.9 mmol) was added next, followed by styrene (22.3 g, 176 mmol) to initiate the polymerization. The reaction mixture immediately turned orange. After 30 min, the reaction was quenched with the addition of 3 ml of methanol. The polymer was isolated by precipitation in methanol 3 times and dried under vacuum.\" , \"conditions\" : [ { \"key\" : \"time\" , \"value\" : [ 60 ]}, { \"key\" : \"temp\" , \"value\" : [ 25 ]} ], \"properties\" : [ { \"key\" : \"yield_mass\" , \"method\" : \"scale\" , \"value\" : 0.47 , \"uncer\" : 0.02 } ], \"keywords\" : [ \"polymerization\" , \"living_poly\" , \"anionic\" , \"solution\" ] } Data node \u00b6 Data node { \"_id\" : \"507f191e810c19729de860md\" , \"class\" : \"data\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860et\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"1H NMR\" , \"type\" : \"nmr_h1\" , \"source\" : \"expt\" , \"file\" : { \"_id\" : \"507f191e810c19729de860ed\" , \"type\" : \"csv\" }, \"sample_preparation\" : \"Dissolved 10 mg of polymer into 0.6 ml of CDCl3.\" , \"conditions\" : [ { \"key\" : \"solvent\" , \"_id\" : \"507f191e810c19729de860md\" , \"name\" : \"CDCl3\" } ], \"equipment\" : { \"description\" : \"Nuclear Magnetic Resonance (NMR) spectra were recorded on a Bruker AVANCE III 500 MHz.\" }, \"calibration\" : { \"description\" : \"Spectra referenced to the residual solvent signal: CDCl3 (1H 7.26 ppm)\" } } Experiment 2: Diblock bottlebrush synthesis and assembly \u00b6 Material node \u00b6 Material node other Material node polymers The following materials nodes: Polystyrene Diblock BB Thin Film 1 { \"_id\" : \"507f191e810c19729de860ef\" , \"class\" : \"material_p\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860et\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"polystyrene\" , \"identifiers\" : [ { \"mat_id\" : 1 , \"pref_name\" : \"poly(styrene)\" , \"names\" : [ \"poly(styrene)\" , \"poly(vinylbenzene)\" ], \"chem_repeat\" : [ \"C8H8\" ], \"bigsmiles\" : \"CCC(C){[<][<]C(C[>])c1ccccc1[>]}CCOC(=O)C1CC2C=CC1C2\" , \"cas\" : \"100-42-5\" } ], \"process\" : { \"_id\" : \"507f191e810c19729de860pe\" , \"name\" : \"anionic polymerization\" }, \"properties\" : [ { \"mat_id\" : 0 , \"key\" : \"m_n\" , \"method\" : \"nmr\" , \"value\" : 4800 , \"uncer\" : 400 , \"data_id\" : \"507f191e810c19729de860em\" }, { \"mat_id\" : 0 , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5200 , \"uncer\" : 100 , \"data_id\" : \"507f191e810c19729de860er\" }, { \"mat_id\" : 0 , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860er\" }, { \"mat_id\" : 1 , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"m_n\" , \"method\" : \"nmr\" , \"value\" : 4600 , \"uncer\" : 400 , \"data_id\" : \"507f191e810c19729de860em\" }, { \"mat_id\" : 1 , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5000 , \"uncer\" : 100 , \"data_id\" : \"507f191e810c19729de860er\" }, { \"mat_id\" : 1 , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860er\" } ] } { \"_id\" : \"507f191e810c19729de860ez\" , \"class\" : \"material_p\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860ss\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"Diblock bottlebrush\" , \"identifiers\" : [ { \"mat_id\" : 1 , \"pref_name\" : \"Diblock bottlebrush of poly(styrene) and poly(lactic acid)\" , \"names\" : [ \"diblock bottlebrush of poly(styrene) and poly(lactic acid)\" , \"(PS-b-PLA) diblock bottlebrush\" ], \"chem_repeat\" : [ \"C8H8\" , \"C3H4O2\" ], \"bigsmiles\" : \"\" }, { \"mat_id\" : 2 , \"pref_name\" : \"poly(styrene) bottlebrush\" , \"names\" : [ \"poly(styrene)\" , \"poly(vinylbenzene)\" ], \"chem_repeat\" : [ \"C8H8\" ], \"bigsmiles\" : \"\" }, { \"mat_id\" : 3 , \"pref_name\" : \"poly(styrene)\" , \"_id\" : \"507f191e810c19729de860ef\" } ], \"process\" : { \"_id\" : \"507f191e810c19729de860de\" , \"name\" : \"ROMP\" }, \"properties\" : [ { \"mat_id\" : 0 , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"molar_p\" , \"method\" : \"nmr\" , \"value\" : 0.46 , \"uncer\" : 0.04 , \"conditions\" : [{ \"key\" : \"relative\" , \"name\" : \"{[>]CC(O[>])C(=O)[<][<]}\" }], \"data_id\" : \"507f191e810c19729de860td\" }, { \"mat_id\" : 1 , \"key\" : \"molar_p\" , \"method\" : \"sec\" , \"value\" : 0.92 , \"uncer\" : 0.02 , \"conditions\" : [{ \"key\" : \"relative\" , \"mat_id\" : 2 }, { \"key\" : \"relative\" , \"mat_id\" : 3 }], \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : 2 , \"key\" : \"molar_p\" , \"method\" : \"sec\" , \"value\" : 0.05 , \"uncer\" : 0.02 , \"conditions\" : [{ \"key\" : \"relative\" , \"mat_id\" : 1 }, { \"key\" : \"relative\" , \"mat_id\" : 3 }], \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : 1 , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 603000 , \"uncer\" : 30000 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : 1 , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : 2 , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 290000 , \"uncer\" : 30000 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : 2 , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.05 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : 3 , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 4800 , \"uncer\" : 200 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : 3 , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.05 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ef;1\" , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 4600 , \"uncer\" : 400 }, { \"mat_id\" : \"507f191e810c19729de860ef;1\" , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5000 , \"uncer\" : 100 }, { \"mat_id\" : \"507f191e810c19729de860ef;1\" , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncer\" : 0.01 }, { \"mat_id\" : \"507f191e810c19729de860eg;1\" , \"component\" : \"{[>]CC(O[>])C(=O)[<][<]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 4700 , \"uncer\" : 400 }, { \"mat_id\" : \"507f191e810c19729de860eg;1\" , \"component\" : \"{[>]CC(O[>])C(=O)[<][<]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5200 , \"uncer\" : 100 }, { \"mat_id\" : \"507f191e810c19729de860eg;1\" , \"component\" : \"{[>]CC(O[>])C(=O)[<][<]}\" , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.09 , \"uncer\" : 0.01 } ], \"data\" : [ { \"_id\" : \"507f191e810c19729de860rr\" , \"name\" : \"solution neutron scattering\" , \"type\" : [ \"s_neutron\" ]}, { \"_id\" : \"507f191e810c19729de860ro\" , \"name\" : \"frequency sweep\" , \"type\" : [ \"g_prime\" , \"g_doub_prime\" ]} ] } { \"_id\" : \"507f191e810c19729de860za\" , \"class\" : \"material_p\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860ss\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"Thin Film 1\" , \"identifiers\" : [ { \"mat_id\" : 1 , \"pref_name\" : \"Diblock bottlebrush\" , \"_id\" : \"507f191e810c19729de860ez\" } ], \"process\" : { \"_id\" : \"507f191e810c19729de860dd\" , \"name\" : \"Spin Coat\" }, \"properties\" : [ { \"mat_id\" : 0 , \"key\" : \"lamda_max_ref\" , \"method\" : \"uv_vis\" , \"value\" : 650 , \"data_id\" : \"507f191e810c19729de860gh\" }, { \"mat_id\" : 0 , \"key\" : \"optical_fwhm_ref\" , \"method\" : \"uv_vis\" , \"value\" : 200 , \"data_id\" : \"507f191e810c19729de860gh\" }, { \"mat_id\" : \"507f191e810c19729de860ez;0\" , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"molar_p\" , \"method\" : \"nmr\" , \"value\" : 0.46 , \"uncer\" : 0.04 , \"conditions\" : [{ \"key\" : \"relative\" , \"name\" : \"{[>]CC(O[>])C(=O)[<][<]}\" }], \"data_id\" : \"507f191e810c19729de860td\" }, { \"mat_id\" : \"507f191e810c19729de860ez;1\" , \"key\" : \"molar_p\" , \"method\" : \"sec\" , \"value\" : 0.92 , \"uncer\" : 0.02 , \"conditions\" : [{ \"key\" : \"relative\" , \"mat_id\" : \"507f191e810c19729de860ez;2\" }, { \"key\" : \"relative\" , \"mat_id\" : \"507f191e810c19729de860ez;3\" }], \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ez;2\" , \"key\" : \"molar_p\" , \"method\" : \"sec\" , \"value\" : 0.05 , \"uncer\" : 0.02 , \"conditions\" : [{ \"key\" : \"relative\" , \"mat_id\" : \"507f191e810c19729de860ez;1\" }, { \"key\" : \"relative\" , \"mat_id\" : \"507f191e810c19729de860ez;3\" }], \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ez;1\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 603000 , \"uncer\" : 30000 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ez;1\" , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ez;2\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 290000 , \"uncer\" : 30000 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ez;2\" , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.05 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ez;3\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 4800 , \"uncer\" : 200 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ez;3\" , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.05 , \"uncer\" : 0.01 , \"data_id\" : \"507f191e810c19729de860en\" }, { \"mat_id\" : \"507f191e810c19729de860ef;1\" , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 4600 , \"uncer\" : 400 }, { \"mat_id\" : \"507f191e810c19729de860ef;1\" , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5000 , \"uncer\" : 100 }, { \"mat_id\" : \"507f191e810c19729de860ef;1\" , \"component\" : \"{[$]CC(c1ccccc1)[$]}\" , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncer\" : 0.01 }, { \"mat_id\" : \"507f191e810c19729de860eg;1\" , \"component\" : \"{[>]CC(O[>])C(=O)[<][<]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 4700 , \"uncer\" : 400 }, { \"mat_id\" : \"507f191e810c19729de860eg;1\" , \"component\" : \"{[>]CC(O[>])C(=O)[<][<]}\" , \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5200 , \"uncer\" : 100 }, { \"mat_id\" : \"507f191e810c19729de860eg;1\" , \"component\" : \"{[>]CC(O[>])C(=O)[<][<]}\" , \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.09 , \"uncer\" : 0.01 } ], \"data\" : [ { \"_id\" : \"507f191e810c19729de860rt\" , \"name\" : \"tem imaging\" , \"type\" : [ \"tem_height\" ]}, { \"_id\" : \"507f191e810c19729de860ry\" , \"name\" : \"photos of print\" , \"type\" : [ \"photo\" ]} ] } Process node \u00b6 Process node Data node \u00b6 Data node Experiment 3: Kinetic analysis of ROMP \u00b6 Material node \u00b6 Material node other Material node polymers Process node \u00b6 Process node { \"_id\" : \"507f191e810c19729de860pe\" , \"class\" : \"process\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"607f191e810c19729de860et\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"NMR ROMP 1\" , \"ingredients\" : [ { \"_id\" : \"507f191e810c19729de860aa\" , \"name\" : \"Norbornene imide\" , \"type\" : \"monomer\" , \"quantities\" : [ { \"key\" : \"volume\" , \"value\" : 0.075 }, { \"key\" : \"mole\" , \"value\" : 0.000303 }, { \"key\" : \"equivalence\" , \"value\" : 100 } ] }, { \"_id\" : \"507f191e810c19729de860ab\" , \"name\" : \"Grubbs Cat. 3\" , \"type\" : \"initiator\" , \"quantities\" : [ { \"key\" : \"mass\" , \"value\" : 0.00268 }, { \"key\" : \"mole\" , \"value\" : 0.00000303 }, { \"key\" : \"equivalence\" , \"value\" : 1 } ] }, { \"_id\" : \"507f191e810c19729de860ac\" , \"name\" : \"CDCl3\" , \"type\" : \"solvent\" , \"quantities\" : [ { \"key\" : \"volume\" , \"value\" : 0.65 } ] }, { \"_id\" : \"507f191e810c19729de860ad\" , \"name\" : \"Ethyl Vinyl Ether\" , \"type\" : \"quench\" , \"quantities\" : [] }, { \"_id\" : \"507f191e810c19729de860ae\" , \"name\" : \"hexane\" , \"type\" : \"workup\" , \"quantities\" : [] } ], \"procedure\" : \"In a glovebox, G3 was dissolved in CDCl3. In a separate vial, norbornene was dissolved in CDCl3. The two solutions were rapidly added to an NMR tube, and shaken. Then the NMR tube was taken out of the glovebox and placed in an NMR at 25 oC.The reaction kinetics were followed by monitoring the appearance of the polymer (5.75 ppm) and disappearance of monomer olefin peak (6.28 ppm) over at least 3 half-lives in the 1H NMR. Upon completion of the kinetic experiment the polymer is precipitated into hexane.\" , \"data\" : [{ \"_id\" : \"507f191e810c19729de860at\" , \"name\" : \"1H NMR kinetics\" , \"type\" : [ \"nmr_kinetics\" ]}], \"conditions\" : [ { \"key\" : \"time\" , \"value\" : [ 5 ]}, { \"key\" : \"temp\" , \"value\" : [ 25 ]}, { \"key\" : \"inert\" , \"value\" : [ 1 ]} ], \"properties\" : [ { \"key\" : \"rate_const\" , \"method\" : \"nmr\" , \"value\" : 1.47 , \"uncer\" : 0.02 , \"unit\" : \"1/min\" , \"data\" : { \"_id\" : \"507f191e810c19729de860at\" , \"name\" : \"1H NMR kinetics\" , \"type\" : [ \"nmr_kinetics\" ]} }, { \"key\" : \"conv_mon\" , \"method\" : \"nmr\" , \"value\" : 0.98 , \"uncer\" : 0.01 , \"data\" : { \"_id\" : \"507f191e810c19729de860at\" , \"name\" : \"1H NMR kinetics\" , \"type\" : [ \"nmr_kinetics\" ]} } ], \"keywords\" : [ \"polymerization\" , \"kinetics\" , \"living_poly\" , \"romp\" , \"solution\" ] } Data node \u00b6 Data node Experiment 4: Simulation \u00b6 Material node \u00b6 Material node other Material node polymers Simulation node \u00b6 Simulation node Data node \u00b6 Data node Publication \u00b6 Publications node { \"_id\" : \"507f191e810c19729de861ec\" , \"class\" : \"publication\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de861cb\" , \"num\" : \"v2.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"title\" : \"Engineering of Molecular Geometry in Bottlebrush Polymers\" , \"collection\" : { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Bottlebrush Synthesis\" , \"created\" : \"2021-04-20 18:06:04\" }, \"authors\" : [ \"Walsh, Dylan J.\" , \"Dutta, Sarit\" , \"Sing, Charles E.\" , \"Guironnet, Damien\" ], \"journal\" : \"Macromolecules\" , \"publisher\" : \"American Chemical Society\" , \"year\" : \"2019\" , \"vol\" : 52 , \"issue\" : 13 , \"page\" : \"4847-4857\" , \"doi\" : \"10.1021/acs.macromol.9b00845\" , \"issn\" : \"0024-9297\" , \"web\" : \"http://pubs.acs.org/doi/10.1021/acs.macromol.9b00845\" }","title":"Example"},{"location":"data-models/Example/#example","text":"To show how the data schema can be implemented, we will go through an example. We start by creating a user, group, and collection. Then we will create several real-world experiments.","title":"Example"},{"location":"data-models/Example/#user-group-collection","text":"For a new user, the first step that needs to be done is to create a 'user'. Once the 'user' is created, then the user can either join an existing 'group' or create a new 'group'. Typically, 'groups' are created and own by a supervisor since 'groups' maintain ownership over 'collections'/'experiments' (such as a principal investigator for an academic lab). In this example, we will create a new 'group' named: \"CRIPT Team\". With a 'user' now in a 'group', we can create a 'collection' that will hold the experiments.","title":"User, Group, Collection"},{"location":"data-models/Example/#user","text":"User node { \"_id\" : \"607f1720633b3e6e70e529c7\" , \"class\" : \"user\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:07:57\" , \"created\" : \"2021-04-20 18:02:08\" , \"name\" : \"Dylan W\" , \"email\" : \"dylan@cript.edu\" , \"owns_groups\" : [{ \"_id\" : \"607f180c633b3e6e70e529c8\" , \"name\" : \"CRIPT Team\" }], \"in_groups\" : [ { \"_id\" : \"607f180c633b3e6e70e529c8\" , \"name\" : \"MIT\" }, { \"_id\" : \"607f180c633b3e6e70e529c7\" , \"name\" : \"Olsen Lab\" } ], \"publication\" : [ { \"_id\" : \"507f191e810c19729de860eq\" , \"name\" : \"Recent trends in catalytic polymerizations\" }, { \"_id\" : \"507f191e810c19729de860er\" , \"name\" : \"Kinetic study of living ring-opening metathesis polymerization with third-generation Grubbs catalysts\" } ], \"orcid\" : \"0000-0000-0000-0001\" , \"organization\" : \"Mass. Institute of Technology\" , \"position\" : \"Research Assistant\" }","title":"User"},{"location":"data-models/Example/#group","text":"Group node { \"_id\" : \"607f180c633b3e6e70e529c8\" , \"class\" : \"group\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"507f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"CRIPT Team\" , \"collection\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"CRIPT Demo\" , \"created\" : \"2021-04-20 18:06:04\" } ], \"parent_group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Olsen Lab\" }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"Citrine\" } ], \"publication\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"Synthesis of new polymer\" } ], \"website\" : \"https://cript.mit.edu/\" , \"email\" : \"cript@mit.edu\" }","title":"Group"},{"location":"data-models/Example/#collection","text":"Collection node { \"_id\" : \"607f180c633b3e6e70e529c8\" , \"class\" : \"coll\" , \"version_schema\" : \"v0.1\" , \"version_control\" : { \"_id\" : \"507f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"name\" : \"CRIPT Demo\" , \"number_experiments\" : 2 , \"experiment\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Anionic polymerization of styrene\" , \"created\" : \"2021-04-20 18:06:04\" }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"Diblock bottlebrush synthesis and assembly\" , \"created\" : \"2021-04-20 18:06:04\" } ], \"child_collection\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Kinetic analysis of ROMP\" , \"created\" : \"2021-04-20 18:06:04\" } ] }","title":"Collection"},{"location":"data-models/Example/#experiments","text":"When defining an experiment it is best to start with the ingredient material nodes, followed by process, data nodes. After that the final product material node can be defined, followed by the experiment node.","title":"Experiments"},{"location":"data-models/Example/#experiment-1-anionic-polymerization-of-styrene","text":"The following example is the anionic polymerization of styrene with secBuLi in a mixture of THF and Toluene. The reaction is then quenched with butanol and precipitated into methanol to obtain the final product, polystyrene. Following the above suggestions, we can start by defining the ingredient material nodes. Both styrene and secbuli solution are written out below. These materials nodes contain information with regard to identity (name, SMILES string, CAS number), and properties (molecular weight, boiling point, etc.). The second node to be defined will be a process node. The process node contains links to the ingredient material nodes as well as the quantities of each material used in the polymerization. The polymerization node also contains experimental procedure details and conditions under which the process was preformed under (reaction time, temperature). Next the data nodes can be defined, in which both a 1 H NMR and SEC analysis was preformed to get M n and dispersity. Finally, we can define the product material node, polystyrene. Here we can include the same identity, property data. All these nodes then are referenced in an experimental node.","title":"Experiment 1: Anionic polymerization of styrene"},{"location":"data-models/Example/#experiment-2-diblock-bottlebrush-synthesis-and-assembly","text":"","title":"Experiment 2: Diblock bottlebrush synthesis and assembly"},{"location":"data-models/Example/#experiment-3-kinetic-analysis-of-romp","text":"","title":"Experiment 3: Kinetic analysis of ROMP"},{"location":"data-models/Example/#experiment-4-simulation","text":"","title":"Experiment 4: Simulation"},{"location":"data-models/Example/#publication","text":"Publications node { \"_id\" : \"507f191e810c19729de861ec\" , \"class\" : \"publication\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de861cb\" , \"num\" : \"v2.1\" }, \"last_modified\" : \"2021-04-20 18:27:50\" , \"created\" : \"2021-04-20 18:06:04\" , \"title\" : \"Engineering of Molecular Geometry in Bottlebrush Polymers\" , \"collection\" : { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Bottlebrush Synthesis\" , \"created\" : \"2021-04-20 18:06:04\" }, \"authors\" : [ \"Walsh, Dylan J.\" , \"Dutta, Sarit\" , \"Sing, Charles E.\" , \"Guironnet, Damien\" ], \"journal\" : \"Macromolecules\" , \"publisher\" : \"American Chemical Society\" , \"year\" : \"2019\" , \"vol\" : 52 , \"issue\" : 13 , \"page\" : \"4847-4857\" , \"doi\" : \"10.1021/acs.macromol.9b00845\" , \"issn\" : \"0024-9297\" , \"web\" : \"http://pubs.acs.org/doi/10.1021/acs.macromol.9b00845\" }","title":"Publication"},{"location":"data-models/Experiments/","text":"Experiment \u00b6 The 'experiment' node contains complete set of references to all the nodes of an experiment. An experiment can range from a synthesis, to scattering experiment, or a simulation. A single experiment is meant to capture a single, or a linear set of processes. For non-linear processes (like running multiple reactions for optimizations, kinetics, etc.) collections are preferred. Features: experiment can reference materials, process, sample, data required information name materials, process, sample, data nodes optional information references notes auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: experiment(materials, process, sample, data) data allow additional optional information in attribute section given that it begins with + JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"expt\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"created\" : da tet ime , \"last_modified\" : da tet ime , \"name\" : s tr i n g , \"materials\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"role\" : s tr i n g , \"_id_proc\" : objec t Id() } ], \"process\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g } ], \"sample\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"id_link\" : objec t id() } ], \"data\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"id_link\" : objec t id() } ], \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of experiment materials list[dict] material nodes materials/_id objectId() auto id of material materials/name string auto name of material materials/id_proc objectId() auto id of process that the material points to materials/id_data objectId() auto id of data that the material points to process list[dict] process nodes process/_id objectId() auto id of process process/name string auto name of process process/id_mat objectId() auto id of ingerdients the process point to sample list[dict] sample nodes sample/_id objectId() auto id of sample sample/name string auto name of sample sample/id_link objectId() auto id of the material the sample points data list[dict] data nodes data/_id objectId() auto id of data data/name string auto name of data data/id_link objectId() auto id of the node the data points Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description reference string reference for this experiment DOI: digital object identifier note string free-form space to store any text Example \u00b6 Example","title":"Experiments"},{"location":"data-models/Experiments/#experiment","text":"The 'experiment' node contains complete set of references to all the nodes of an experiment. An experiment can range from a synthesis, to scattering experiment, or a simulation. A single experiment is meant to capture a single, or a linear set of processes. For non-linear processes (like running multiple reactions for optimizations, kinetics, etc.) collections are preferred. Features: experiment can reference materials, process, sample, data required information name materials, process, sample, data nodes optional information references notes auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: experiment(materials, process, sample, data) data allow additional optional information in attribute section given that it begins with +","title":"Experiment"},{"location":"data-models/Experiments/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"expt\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"created\" : da tet ime , \"last_modified\" : da tet ime , \"name\" : s tr i n g , \"materials\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"role\" : s tr i n g , \"_id_proc\" : objec t Id() } ], \"process\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g } ], \"sample\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"id_link\" : objec t id() } ], \"data\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"id_link\" : objec t id() } ], \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Experiments/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of experiment materials list[dict] material nodes materials/_id objectId() auto id of material materials/name string auto name of material materials/id_proc objectId() auto id of process that the material points to materials/id_data objectId() auto id of data that the material points to process list[dict] process nodes process/_id objectId() auto id of process process/name string auto name of process process/id_mat objectId() auto id of ingerdients the process point to sample list[dict] sample nodes sample/_id objectId() auto id of sample sample/name string auto name of sample sample/id_link objectId() auto id of the material the sample points data list[dict] data nodes data/_id objectId() auto id of data data/name string auto name of data data/id_link objectId() auto id of the node the data points","title":"Description"},{"location":"data-models/Experiments/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description reference string reference for this experiment DOI: digital object identifier note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Experiments/#example","text":"Example","title":"Example"},{"location":"data-models/FAQ/","text":"Are mixtures supported? Yes, in the Materials node the identifiers section is a list, which means multiple identifiers from each of the mixtures components can be added. Also, see diblock BB exmaple What format should units be in? We use Pint to convert units, so check with their documentation for officially supported units . Are user defined properties or material identifiers allowed? Yes, CRIPT accepts any user-defined vocabulary such that it begins with a + , but would encourage users to stick to official vocabulary whenever possible as that increases the findablity of your data. Can I link to data in a different database? Yes, the data node allows you to link to outside data with web_link .","title":"FAQ"},{"location":"data-models/Groups/","text":"Groups \u00b6 The 'group' node contains data related to a group. Example of groups are MIT, Citrine, CRIPT development team, or a research group. Features: groups within groups are allowed (max depth 20) groups can reference groups, collections, publications required information name optional information collection (CRIPT node) parent group (CRIPT node) publication (CRIPT node) website email notes auto-generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"group\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"name\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of group Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description collection list[dict] collection nodes collection\\_id objectId() id of collection collection\\name string name of collection collection\\created datetime date of collection parent_group list[dict] parent group parent_group\\_id objectId() id of parent group parent_group\\name string name of parent group publication list[dict] publications the user authored publication\\_id objectId() id of publication publication\\title string title of publication website string website of group email string group email address notes string free-form space to store any text Example \u00b6 Groups Example","title":"Groups"},{"location":"data-models/Groups/#groups","text":"The 'group' node contains data related to a group. Example of groups are MIT, Citrine, CRIPT development team, or a research group. Features: groups within groups are allowed (max depth 20) groups can reference groups, collections, publications required information name optional information collection (CRIPT node) parent group (CRIPT node) publication (CRIPT node) website email notes auto-generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child)","title":"Groups"},{"location":"data-models/Groups/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"group\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"name\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Groups/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of group","title":"Description"},{"location":"data-models/Groups/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description collection list[dict] collection nodes collection\\_id objectId() id of collection collection\\name string name of collection collection\\created datetime date of collection parent_group list[dict] parent group parent_group\\_id objectId() id of parent group parent_group\\name string name of parent group publication list[dict] publications the user authored publication\\_id objectId() id of publication publication\\title string title of publication website string website of group email string group email address notes string free-form space to store any text","title":"Attributes"},{"location":"data-models/Groups/#example","text":"Groups Example","title":"Example"},{"location":"data-models/Index/","text":"Table Styling in Markdown \u00b6 .heatMap { width: 70%; text-align: center; } .heatMap th { background: grey; word-wrap: break-word; text-align: center; } .heatMap tr:nth-child(1) { background: red; } .heatMap tr:nth-child(2) { background: orange; } .heatMap tr:nth-child(3) { background: green; } | Everything | in this table | is Centered | and the table will only take up 70% of the screen width | | -- | -- | -- | -- | | This | is | a | Red Row | | This | is | an | Orange Row | | This | is | a | Green Row |","title":"Index"},{"location":"data-models/Index/#table-styling-in-markdown","text":".heatMap { width: 70%; text-align: center; } .heatMap th { background: grey; word-wrap: break-word; text-align: center; } .heatMap tr:nth-child(1) { background: red; } .heatMap tr:nth-child(2) { background: orange; } .heatMap tr:nth-child(3) { background: green; } | Everything | in this table | is Centered | and the table will only take up 70% of the screen width | | -- | -- | -- | -- | | This | is | a | Red Row | | This | is | an | Orange Row | | This | is | a | Green Row |","title":"Table Styling in Markdown"},{"location":"data-models/Materials_O/","text":"Materials - other \u00b6 The 'material' node contains identity and property data for a chemical. This material node is specifically tailored for small molecules and inorganics. The node is fundamental identical to 'Materials - Polymers' except for the keys in the Identifiers, Properties, and Keywords sections. Features: Same as material node for polymer JSON Schema \u00b6 Same as material node for polymer Description \u00b6 Same as material node for polymer ; except for identifiers. Attributes \u00b6 Same as material node for polymer ; except for properties and keywords. see 'other material' properties section see 'other material' keywords section Identifiers \u00b6 A similar structure to material node for polymer ; except for keys. Key Data Type Required Description mat_id integer required id that is used to link to properties (auto-generated) pref_name string required Preferred name names list[string] optional Additional names, abbreviations, short hands for the material chem_form string optional chemical formula, Ex. benzene: \"C6H6\" smiles string optional simplified molecular-input line-entry system cas string optional CAS number pubChem_cid string optional PubChem CID inchi string optional IUPAC International Chemical Identifier InChI inchi_key string optional a hashed version of the full InChI Properties \u00b6 A similar structure to material node for polymer ; except for keys. Key Method Range Units Conditions Description conc [] [0, 1.79e+308] M concentration weight_p [] [0, 1] None relative weight percent molar_p ['nmr', 'sec'] [0, 1] None relative mole percent phase [] [solid, liquid, gas] None state of matter color [] string None the visual appearance of the chemical odor [] string None a description of the smell of the chemical ref_index [] [0, 1.79e+308] None temperature refractive index; a dimensionless number that describes how fast light travels through the material. density [] [0, 1.79e+308] None temperature and pressure the amount of chemical that fit within a unit of volume. mw ['nmr', 'ms'] [0, 1.79e+308] g/mol molecular weight conc [] [0, 1.79e+308] M concentration bp [] [-273.15, 1.79E308] degC pressure boiling temperature mp [] [-273.15, 1.79E308] degC melting temperature flash [] [-273.15, 1.79E308] degC flash point, the temperature at a which a chemical gives off sufficient vapor to ignite ignite [] [-273.15, 1.79E308] degC autoignition temperature decomp [] [-273.15, 1.79E308] degC decomposition temperature vis ['viscometer'] [0, 1.79e+308] dl/g temperature viscosity ph [] [-1.79E308, 1.79E308] None potential of hydrogen pka [] [-1.79E308, 1.79E308] None negative base -10 logarithm of the acid dissociation constant pkb [] [-1.79E308, 1.79E308] None negative base -10 logarithm of the base dissociation constant solubility [] [0, 1.79E308] mg/mL temperature and solvent the ability to dissolve vapor_pres [] [0, 1.70E308] kPa temperature vapor pressure heat_vap [] [0, 1.79E308] kj/mol temperature heat of vaporization surface_ten [] [0, 1.79E308] N/m temperature surface tension mag_susc [] [-1.79E308, 1.79E308] ml/mol magnetic susceptibility dipole [] [0, 1.79E308] debye dipole moment Keywords \u00b6 Keywords are an optional field that allow users to classify the material. Selecting multiple keywords is allowed. Keyword Description monomer types: olefin a chemical with one double bond and is locally surrounded by only C and H diene a chemical with two or more double bonds styrene a chemical with C=C-(c1ccccc1) structure cyclic_olefin a chemical where at least one double bond is found in a ring (excluding aromatic rings) acetylene a chemical with one or more triple bounds (C\u2261C) vinyl a chemical with C=C-R structure and the local surrounding contains elements other than C and H vinyl_ether a chemical with C=C-O-R structure vinyl_ester a chemical with C=C-O-(C=O)-R structure acrylate a chemical with C=C-C(=O)O-R structure methylacrylate a chemical with C=C(C)-C(=O)O-R structure lactone (cyclic ester) a chemical with R-C(=O)O-R within a ring cyclic_ether a chemical with R-O-R within a ring cyclic_carbonate a chemical with R-O-C(=O)O-R within a ring cyclic_anhydride a chemical with R-C(=O)-O-C(=O)-R with a ring (includes N-carboxy anhydrides) oxazoline a chemical with a R-N=C(R)-O-R within a five membered ring lactam (cyclic amide) a chemical with R-C(=O)N(R)-R within a ring cyclic_amine a chemical with R-N(R)-R within a ring cyclic_sulfur a chemical with R-S-R or R-S(=O)-R within a ring thiophene a chemical with C=C1=CC=CS1 5 member ring phosphoesters a chemical with R-O-P(=O)(OR)-O-R within a ring phosphonate a chemical with R-O-P(=O)(C(R)(R)R)-O-R within a ring phostone a chemical with R-P(=O)(R)-O-R within a ring phosphazenes a chemical with R-P(R)(R)=N-R within a ring siloxane a chemical with R-O-Si(R)(R)-O-R within a ring carbosiloxane a chemical with R-Si(R)(R)-R within a ring diol a chemical with two or more -OH groups dicarboxylic_acid a chemical with two or more -C(=O)OH groups diamines a chemical with two or more -NH2 groups diacid chloride a chemical with two or more -COCl groups other filler a substance that is added to resins matrix a substance for binding and holding reinforcements together Example \u00b6 Example","title":"Materials - other"},{"location":"data-models/Materials_O/#materials-other","text":"The 'material' node contains identity and property data for a chemical. This material node is specifically tailored for small molecules and inorganics. The node is fundamental identical to 'Materials - Polymers' except for the keys in the Identifiers, Properties, and Keywords sections. Features: Same as material node for polymer","title":"Materials - other"},{"location":"data-models/Materials_O/#json-schema","text":"Same as material node for polymer","title":"JSON Schema"},{"location":"data-models/Materials_O/#description","text":"Same as material node for polymer ; except for identifiers.","title":"Description"},{"location":"data-models/Materials_O/#attributes","text":"Same as material node for polymer ; except for properties and keywords. see 'other material' properties section see 'other material' keywords section","title":"Attributes"},{"location":"data-models/Materials_O/#identifiers","text":"A similar structure to material node for polymer ; except for keys. Key Data Type Required Description mat_id integer required id that is used to link to properties (auto-generated) pref_name string required Preferred name names list[string] optional Additional names, abbreviations, short hands for the material chem_form string optional chemical formula, Ex. benzene: \"C6H6\" smiles string optional simplified molecular-input line-entry system cas string optional CAS number pubChem_cid string optional PubChem CID inchi string optional IUPAC International Chemical Identifier InChI inchi_key string optional a hashed version of the full InChI","title":"Identifiers"},{"location":"data-models/Materials_O/#properties","text":"A similar structure to material node for polymer ; except for keys. Key Method Range Units Conditions Description conc [] [0, 1.79e+308] M concentration weight_p [] [0, 1] None relative weight percent molar_p ['nmr', 'sec'] [0, 1] None relative mole percent phase [] [solid, liquid, gas] None state of matter color [] string None the visual appearance of the chemical odor [] string None a description of the smell of the chemical ref_index [] [0, 1.79e+308] None temperature refractive index; a dimensionless number that describes how fast light travels through the material. density [] [0, 1.79e+308] None temperature and pressure the amount of chemical that fit within a unit of volume. mw ['nmr', 'ms'] [0, 1.79e+308] g/mol molecular weight conc [] [0, 1.79e+308] M concentration bp [] [-273.15, 1.79E308] degC pressure boiling temperature mp [] [-273.15, 1.79E308] degC melting temperature flash [] [-273.15, 1.79E308] degC flash point, the temperature at a which a chemical gives off sufficient vapor to ignite ignite [] [-273.15, 1.79E308] degC autoignition temperature decomp [] [-273.15, 1.79E308] degC decomposition temperature vis ['viscometer'] [0, 1.79e+308] dl/g temperature viscosity ph [] [-1.79E308, 1.79E308] None potential of hydrogen pka [] [-1.79E308, 1.79E308] None negative base -10 logarithm of the acid dissociation constant pkb [] [-1.79E308, 1.79E308] None negative base -10 logarithm of the base dissociation constant solubility [] [0, 1.79E308] mg/mL temperature and solvent the ability to dissolve vapor_pres [] [0, 1.70E308] kPa temperature vapor pressure heat_vap [] [0, 1.79E308] kj/mol temperature heat of vaporization surface_ten [] [0, 1.79E308] N/m temperature surface tension mag_susc [] [-1.79E308, 1.79E308] ml/mol magnetic susceptibility dipole [] [0, 1.79E308] debye dipole moment","title":"Properties"},{"location":"data-models/Materials_O/#keywords","text":"Keywords are an optional field that allow users to classify the material. Selecting multiple keywords is allowed. Keyword Description monomer types: olefin a chemical with one double bond and is locally surrounded by only C and H diene a chemical with two or more double bonds styrene a chemical with C=C-(c1ccccc1) structure cyclic_olefin a chemical where at least one double bond is found in a ring (excluding aromatic rings) acetylene a chemical with one or more triple bounds (C\u2261C) vinyl a chemical with C=C-R structure and the local surrounding contains elements other than C and H vinyl_ether a chemical with C=C-O-R structure vinyl_ester a chemical with C=C-O-(C=O)-R structure acrylate a chemical with C=C-C(=O)O-R structure methylacrylate a chemical with C=C(C)-C(=O)O-R structure lactone (cyclic ester) a chemical with R-C(=O)O-R within a ring cyclic_ether a chemical with R-O-R within a ring cyclic_carbonate a chemical with R-O-C(=O)O-R within a ring cyclic_anhydride a chemical with R-C(=O)-O-C(=O)-R with a ring (includes N-carboxy anhydrides) oxazoline a chemical with a R-N=C(R)-O-R within a five membered ring lactam (cyclic amide) a chemical with R-C(=O)N(R)-R within a ring cyclic_amine a chemical with R-N(R)-R within a ring cyclic_sulfur a chemical with R-S-R or R-S(=O)-R within a ring thiophene a chemical with C=C1=CC=CS1 5 member ring phosphoesters a chemical with R-O-P(=O)(OR)-O-R within a ring phosphonate a chemical with R-O-P(=O)(C(R)(R)R)-O-R within a ring phostone a chemical with R-P(=O)(R)-O-R within a ring phosphazenes a chemical with R-P(R)(R)=N-R within a ring siloxane a chemical with R-O-Si(R)(R)-O-R within a ring carbosiloxane a chemical with R-Si(R)(R)-R within a ring diol a chemical with two or more -OH groups dicarboxylic_acid a chemical with two or more -C(=O)OH groups diamines a chemical with two or more -NH2 groups diacid chloride a chemical with two or more -COCl groups other filler a substance that is added to resins matrix a substance for binding and holding reinforcements together","title":"Keywords"},{"location":"data-models/Materials_O/#example","text":"Example","title":"Example"},{"location":"data-models/Materials_P/","text":"Materials - Polymer \u00b6 The 'material' node contains identity and property data for a chemical. This material node is specifically tailored for polymers or mixtures containing polymers. Features: material node points to data, sample and process nodes required information name identifiers optional information data (CRIPT nodes) sample (CRIPT nodes) process (CRIPT node) property (and child properties) keywords source lot_num storage conditions notes auto generate: _id class version_schema version_control (& all child) <-- update with version control node JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"material_p\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"name\" : s tr i n g , \"identifiers\" : { \"see identifiers\" : \"for details\" }, \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node; \"material_p\" version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of chemical identifiers list[dict] required see identifiers section Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Units Description sample list[dict] sample node sample/_id objectId() id of sample sample/name string name of sample sample/prop list[dict] properties of sample process dict The process that produced the material. process/_id objectId() id of process process/name string name of process properties list[dict] see properties section data list[dict] data node data/_id objectId() id of data data/name string name of data data/type list[string] type of data keywords list[string] see keywords section below source string source of material lot_number string lot number storage dict storage conditions storage\\temp double degC storage temperature storage\\time_num double days storage time storage\\atm string storage atmosphere storage\\note string notes related to storage hazard list[string] hazards note string free-form space to store any text Identifiers \u00b6 Identifiers are unique ids or entities that establishes the identity of the chemical. Providing as many identifiers as possible greatly increases the findability. Mixtures are supported by appending to list of identifiers. [ { 'Key' : value , 'Key' : value } ] Key Data Type Required Description mat_id integer auto-generated id that is used to link to properties pref_name string required preferred name _id objectID optional ID for material that already exists names list[string] optional additional names, abbreviations, short hands for the material cas string optional CAS number bigsmiles string optional bigSMILES Line Notation chem_repeat list[string] optional chemical formula of repeating unit, Ex. polystyrene: \"C8H8\" smiles string optional simplified molecular-input line-entry system chem_form string optional chemical formula, Ex. benzene: \"C6H6\" pubChem_cid string optional PubChem CID inchi string optional IUPAC International Chemical Identifier InChI inchi_key string optional a hashed version of the full InChI Properties \u00b6 Properties are any physical, chemical, or mechanical specification that defines or is embodied by the material. Properties consist of the following structure: { \"mat_id\" : i nter ger or s tr i n g , \"component\" : s tr i n g , \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data_id\" : Objec t ID , \"conditions\" : [ { \"key\" : s tr i n g , \"value\" : double , \"unit\" : s tr i n g , \"uncer\" : double , \"_id\" : Objec t ID , \"name\" : s tr i n g , \"mat_id\" : i nter ger or s tr i n g } ], \"note\" : \"string\" } Key Description mat_id Corresponds to the mat_id in the identifiers section and the corresponding material _id if the property if from a child (Format, materialized tree: _id(child-newest);...;_id(child-oldest);mat_id) . This identifier is useful when a mixture is characterized, and a property only corresponds to one chemical in the mixture. If the mat_id is \"0\" then the property corresponds to the mixture. component If the property speaks to a specific sub-structure. It can be specified here using BigSMILES . key The property key. See tables below. method Method used to obtain property. See table below. value Value of property. uncer Uncertainty of value. unit Units associated with vale. (Units are not stored for officially supported data as all official values are converted to database standard prior to storage.) data Link to data node associated with property. conditions Conditions under which value was obtained. note Free-form space to store any text. The range bound is limited to the largest number that can be stored in 64 bits (1.79e+308). Chemical \u00b6 Key Method Range Units Conditions Description conc [] [0, 1.79e+308] M concentration weight_p [] [0, 1] None relative weight percent molar_p ['nmr', 'sec'] [0, 1] None relative mole percent m_n ['nmr', 'sec', 'maldi', 'osmtic_pres'] [0, 1.79e+308] g/mol Average molecular weight on the bases of moles or first moment of the molecular weight distribution. m_w ['nmr', 'sec', 'maldi', 'ls'] [0, 1.79e+308] g/mol Average molecular weight on the bases of weight. d ['sec', 'maldi'] [1, 1.79e+308] Ratio of weight averaged molecular weight over number average molecular weight. m_z ['nmr', 'sec', 'maldi', 'ultra_centr'] [0, 1.79e+308] g/mol m_v ['viscometer'] [0, 1.79e+308] g/mol Average molecular weight determined from viscosity m_p ['sec', 'maldi'] [0, 1.79e+308] g/mol Peak average molecular weight mw_std_dev ['nmr', 'sec', 'maldi'] [0, 1.79e+308] g/mol Standard deviation of molecular weight distribution or square root of the second moment ofthe molecular weight distribution mw_var ['nmr', 'sec', 'maldi'] [0, 1.79e+308] g/mol Variance of molecular weight distribution or the second moment of the molecular weight distribution mw_skew ['nmr', 'sec', 'maldi'] [0, 1.79e+308] g/mol Skewness of molecular weight distribution or the third moment of the molecular weight distribution mw_kurtosis ['nmr', 'sec', 'maldi'] [0, 1.79e+308] g/mol Kurtosis of molecular weight distribution or the fourth moment of the molecular weight distribution tac_Pm ['nmr'] [0, 1] probability of finding meso diads (Pm) comp_frac [] [0, 1] composition: mole fraction of component ?????? branch [] tran/cis [] Physical \u00b6 Key Method Range Units Conditions Description phase [] [solid, liquid, gas] None state of matter color [] string None the visual appearance of the chemical odor [] string None a description of the smell of the chemical solubility [] [0, 1.79E308] mg/mL temperature and solvent the ability to dissolve heat_vap [] [0, 1.79E308] kj/mol temperature heat of vaporization surface_ten [] [0, 1.79E308] N/m temperature surface tension ref_index [] [0, 1.79e+308] None A dimensionless number that describes how fast light travels through the material. density [] [0, 1.79e+308] None The amount of substance that fit within a unit of volume. t_m ['dsc'] [-273.15, 1.79e+308] degC The transition temperature where crystal structures are destroyed. t_g ['dsc'] [-273.15, 1.79e+308] degC The transition temperature where a substances turns into a glass; vitrification. crys_frac ['dsc'] [0, 1.2] None Percent Crystallinity By Weight enth_crys ['dsc'] [-1.79e+308, 1.79e+308] J/mol Enthalpy of Crystallization, molar basis entr_crys ['dsc'] [-1.79e+308, 1.79e+308] J/mol/K Entropy of Crystallization, molar basis therm_cond [] [0, 1.79e+308] W/m/k Measure of a materials ability to conduct heat therm_expand_v [] [-1.79e+308, 1.79e+308] 1/K A change in volume in response to a change in temperature (not including phase transitions) therm_expand_l [] [-1.79e+308, 1.79e+308] 1/K A change in dimension in response to a change in temperature (not including phase transitions) c_p ['calorimetry', 'dsc'] [-1.79e+308, 1.79e+308] J/mol/K The amount of heat needed to be supplied to a given mole (based on repeat unit) to produce a change in temperature at constant pressure c_v [] [-1.79e+308, 1.79e+308] J/mol/K The amount of heat needed to be supplied to a given mole (based on repeat unit) to produce a change in temperature at constant volume therm_diff [] [-1.79e+308, 1.79e+308] m^2/s A measures the rate of transfer of heat of a material from the hot end to the cold end. tensile_mod ['utm'] [0, 1.79e+308] GPa tensile_str ['utm'] [0, 1.79e+308] MPa The maximum stress that a material can withstand while being stressed. yield_str ['utm'] [0, 1.79e+308] MPa Point on a stress-strain curve that indicates the limit of elastic behavior. frac_strain ['utm'] [1, 1.79e+308] None The maximum strain that a material can withstand while being stressed. intr_vis ['viscometer'] [0, 1.79e+308] dl/g A measure of a solute contribution to the viscosity of a solution mh_parameter_k ['sec', 'viscometer'] [0, 1.79e+308] ml/g Mark Houwink Parameters provide a relation between intrinsic viscosity and molecular weight mh_parameter_a ['sec', 'viscometer'] [0, 1.79e+308] None Mark Houwink Parameters provide a relation between intrinsic viscosity and molecular weight diff_coef [] [0, 1.79e+308] cm^2/s Proportionality constant between the molar flux due to molecular diffusion and the gradient of concentration. relax_time_seg [] [0, 1.79e+308] s Time it takes a polymer segment to relax relax_time_long [] [0, 1.79e+308] s Time longest time scale it takes to relax an applied stress iso_comp [] [-1.79e+308, 1.79e+308] m^2/N A change in volume in response to a change in pressure char_ratio [] [0, 1.79e+308] None A measure of chain flexibility. khun_len [] [0, 1.79e+308] angstrom A measure of chain flexibility. stat_seg_len [] [0, 1.79e+308] angstrom A measure of chain flexibility. persis_len [] [0, 1.79e+308] angstrom A measure of the bending stiffness of a polymer. r_g ['ls'] [0, 1.79e+308] nm The root-mean-square mass weighted average distance of monomers from the center of mass. r_h ['dls'] [0, 1.79e+308] nm The radius of an equivalent hard-sphere diffusing at the same rate as the molecule under observation virial_coef [] [0, 1.79e+308] cm 3 * mole/gram 2 inter_Parm [] [0, 1.79e+308] cm 3 * mole/gram 2 A measure of the interaction between molecules and the medium in which it is dissolved in. melt_flow [] [0, 1.79e+308] g the mass of polymer flowing through a capillary of a specific diameter and length by a pressure of a specified time lamda_max_ref ['uv_vis'] [0, 1.79e+308] nm the peak wavelength of reflection lamda_max_abs ['uv_vis'] [0, 1.79e+308] nm the peak wavelength of absorbance lamda_max_tran ['uv_vis'] [0, 1.79e+308] nm the peak wavelength of transmission optical_fwhm_ref ['uv_vis'] [0, 1.79e+308] nm Full width at half maximum of a reflection optical_fwhm_abs ['uv_vis'] [0, 1.79e+308] nm Full width at half maximum of a absorbance optical_fwhm_tran ['uv_vis'] [0, 1.79e+308] nm Full width at half maximum of a transmission Conditions \u00b6 Key Units Location Description time min value time temperature degC value temperature pressure kPa value pressure (absolute) solvent none _id, name solvent; material node standard none _id, name measurement standard (ASTM, ISO) relative none name, mat_id mat_id or bigSMILES filled into name Methods \u00b6 Key Description prescribed A value that can be defined, (Ex. calculating MW from molecular formula) comp Computation or Simulation nmr Nuclear Magnetic Resonance sec Size Exclusion Chromatography / Gel permeation chromatography (GPC) gc Gas Chromatography chrom General Chromatography ms General Mass Spectrometry maldi Matrix Assisted Laser Desorption Ionization ultra_centr Ultra Centrifugation osmtic_pres Osmotic Pressure calorimetry Calorimetry cryoscopy Cryoscopy ebullioscopy Ebullioscopy viscometer Viscometer utm Universal Testing Machine dma Dynamic Mechanical Analysis dsc Differential Scanning Calorimetry tga Thermogravimetric Analysis raman Raman spectroscopy ir Infrared spectroscopy uv_vis Ultraviolet\u2013visible spectroscopy x_ray X_ray spectroscopy saxs Small-angle x-ray scattering waxs Wide-angle x-ray scattering neutron Neutron scattering ls Static Light Scattering dls Dynamic Light Scattering confocal Confocal microscopy afm Atomic force microscopy tem Transmission electron microscopy sem Scanning electron microscopy scale Scale Keywords \u00b6 Keywords are an optional field that allow users to classify the material. Selecting multiple keywords is allowed. Keyword Description General structure terms thermoset a cross-linked polymer thermoplastic a polymer that becomes pliable at elevated temperature adn solidifies upon cooling to room temperature semicrystalline a polymer that does exhibit some crystalline structure elastomer a cross-linked polymer with a glass transition well below room temperature amorphous a polymer that does not exhibit any crystalline structure homopolymer a polymer with a single repeating structure copolymer a polymer with a two or more repeating structures random a polymer with a two or more repeating structures are randomly distributed block a polymer with a two or more repeating structures are distributed in groups alternating a polymer where the composition oscillates between two repeating structures gradient a polymer where the composition gradually transitions from one repeating structure into another isotactic a polymer with all substituent having the same stereoconfiguration syndiotactic a polymer with substituent alternating stereoconfiguration atactic a polymer with substituent having a random distribution of stereoconfiguration regio_regular a polymer with one positional isomer; all head-to-tail or tail-to-tail and head-to-head regio_irregular a polymer with more than one positional isomer; mixture of head-to-tail, tail-to-tail, and head-to-head linear a polymer with a single line of repeat units star a polymer with 3 or more arms originating from a single point ring a polymer with no ends or a loop of repeat units comb a polymer with a main chain with small chains branching off the main chain bottlebrush a polymer with a very high density of chains branching off the main linear chain hyperbranch a polymer with a very high degree of branches and branches have more branching network a polymer with a where a molecular structure percolates through the full macroscopic sample polymer_blend a material with two or more composed of two or more polymers composite a material with two or more components polymer types: polyolefins a polymer with [$]CC(R)[$] structure and the locally surrounding is C and H polystyrenes a polymer with [$]CC(c1ccccc1)[$] structure polyphenylenes a polymer with [$]c1cccc(c1)[$] structure polyvinyls a polymer with [$]CC(R)[$] structure and the locally surrounding by elements other than C and H polyacrylates a polymer with [$]CC(C(=O)O-R)[$] structure polymethacrylates a polymer with [$]CC(C)(C(=O)O-R)[$] structure polyvinyl_ethers a polymer with [$]CC(OR)[$] structure polyvinyl_esters a polymer with [$]CC(OC(=O)-R)[$] structure polyesters a polymer with R-C(=O)O-R within the backbone polycarbonates a polymer with R-O-C(=O)O-R within the backbone polyethers a polymer with R-O-R within the backbone polyanydrides a polymer with R-C(=O)-O-C(=O)-R within the backbone polyketones a polymer with R-C(=O)-R with the backbone polyamines a polymer with R-N(R)-R within the backbone polyurethanes a polymer with R-N(R)-C(=O)O-R within the backbone polyamides a polymer with R-C(=O)N(R)-R within the backbone polyureas a polymer with R-N(R)-C(=O)-N(R)-R within the backbone silicones a polymer with R-Si(R)(R)-R within the backbone polysulfides a polymer with R-S-R within the backbone polysulfones a polymer with R-S(=O)(=O)-R within the backbone polysulfoxides a polymer with R-S(=O)-R within the backbone polythiophenes a polymer with C=C1=CC=CS1 5 member ring within the backbone polyphosphazenes a polymer with R-P(R)(R)=N-R within the backbone conjugated_poly a polymer with delocalized electrons in the p orbital along the backbone Example \u00b6 Example","title":"Materials - polymers"},{"location":"data-models/Materials_P/#materials-polymer","text":"The 'material' node contains identity and property data for a chemical. This material node is specifically tailored for polymers or mixtures containing polymers. Features: material node points to data, sample and process nodes required information name identifiers optional information data (CRIPT nodes) sample (CRIPT nodes) process (CRIPT node) property (and child properties) keywords source lot_num storage conditions notes auto generate: _id class version_schema version_control (& all child) <-- update with version control node","title":"Materials - Polymer"},{"location":"data-models/Materials_P/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"material_p\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"name\" : s tr i n g , \"identifiers\" : { \"see identifiers\" : \"for details\" }, \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Materials_P/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node; \"material_p\" version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of chemical identifiers list[dict] required see identifiers section","title":"Description"},{"location":"data-models/Materials_P/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Units Description sample list[dict] sample node sample/_id objectId() id of sample sample/name string name of sample sample/prop list[dict] properties of sample process dict The process that produced the material. process/_id objectId() id of process process/name string name of process properties list[dict] see properties section data list[dict] data node data/_id objectId() id of data data/name string name of data data/type list[string] type of data keywords list[string] see keywords section below source string source of material lot_number string lot number storage dict storage conditions storage\\temp double degC storage temperature storage\\time_num double days storage time storage\\atm string storage atmosphere storage\\note string notes related to storage hazard list[string] hazards note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Materials_P/#identifiers","text":"Identifiers are unique ids or entities that establishes the identity of the chemical. Providing as many identifiers as possible greatly increases the findability. Mixtures are supported by appending to list of identifiers. [ { 'Key' : value , 'Key' : value } ] Key Data Type Required Description mat_id integer auto-generated id that is used to link to properties pref_name string required preferred name _id objectID optional ID for material that already exists names list[string] optional additional names, abbreviations, short hands for the material cas string optional CAS number bigsmiles string optional bigSMILES Line Notation chem_repeat list[string] optional chemical formula of repeating unit, Ex. polystyrene: \"C8H8\" smiles string optional simplified molecular-input line-entry system chem_form string optional chemical formula, Ex. benzene: \"C6H6\" pubChem_cid string optional PubChem CID inchi string optional IUPAC International Chemical Identifier InChI inchi_key string optional a hashed version of the full InChI","title":"Identifiers"},{"location":"data-models/Materials_P/#properties","text":"Properties are any physical, chemical, or mechanical specification that defines or is embodied by the material. Properties consist of the following structure: { \"mat_id\" : i nter ger or s tr i n g , \"component\" : s tr i n g , \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data_id\" : Objec t ID , \"conditions\" : [ { \"key\" : s tr i n g , \"value\" : double , \"unit\" : s tr i n g , \"uncer\" : double , \"_id\" : Objec t ID , \"name\" : s tr i n g , \"mat_id\" : i nter ger or s tr i n g } ], \"note\" : \"string\" } Key Description mat_id Corresponds to the mat_id in the identifiers section and the corresponding material _id if the property if from a child (Format, materialized tree: _id(child-newest);...;_id(child-oldest);mat_id) . This identifier is useful when a mixture is characterized, and a property only corresponds to one chemical in the mixture. If the mat_id is \"0\" then the property corresponds to the mixture. component If the property speaks to a specific sub-structure. It can be specified here using BigSMILES . key The property key. See tables below. method Method used to obtain property. See table below. value Value of property. uncer Uncertainty of value. unit Units associated with vale. (Units are not stored for officially supported data as all official values are converted to database standard prior to storage.) data Link to data node associated with property. conditions Conditions under which value was obtained. note Free-form space to store any text. The range bound is limited to the largest number that can be stored in 64 bits (1.79e+308).","title":"Properties"},{"location":"data-models/Materials_P/#keywords","text":"Keywords are an optional field that allow users to classify the material. Selecting multiple keywords is allowed. Keyword Description General structure terms thermoset a cross-linked polymer thermoplastic a polymer that becomes pliable at elevated temperature adn solidifies upon cooling to room temperature semicrystalline a polymer that does exhibit some crystalline structure elastomer a cross-linked polymer with a glass transition well below room temperature amorphous a polymer that does not exhibit any crystalline structure homopolymer a polymer with a single repeating structure copolymer a polymer with a two or more repeating structures random a polymer with a two or more repeating structures are randomly distributed block a polymer with a two or more repeating structures are distributed in groups alternating a polymer where the composition oscillates between two repeating structures gradient a polymer where the composition gradually transitions from one repeating structure into another isotactic a polymer with all substituent having the same stereoconfiguration syndiotactic a polymer with substituent alternating stereoconfiguration atactic a polymer with substituent having a random distribution of stereoconfiguration regio_regular a polymer with one positional isomer; all head-to-tail or tail-to-tail and head-to-head regio_irregular a polymer with more than one positional isomer; mixture of head-to-tail, tail-to-tail, and head-to-head linear a polymer with a single line of repeat units star a polymer with 3 or more arms originating from a single point ring a polymer with no ends or a loop of repeat units comb a polymer with a main chain with small chains branching off the main chain bottlebrush a polymer with a very high density of chains branching off the main linear chain hyperbranch a polymer with a very high degree of branches and branches have more branching network a polymer with a where a molecular structure percolates through the full macroscopic sample polymer_blend a material with two or more composed of two or more polymers composite a material with two or more components polymer types: polyolefins a polymer with [$]CC(R)[$] structure and the locally surrounding is C and H polystyrenes a polymer with [$]CC(c1ccccc1)[$] structure polyphenylenes a polymer with [$]c1cccc(c1)[$] structure polyvinyls a polymer with [$]CC(R)[$] structure and the locally surrounding by elements other than C and H polyacrylates a polymer with [$]CC(C(=O)O-R)[$] structure polymethacrylates a polymer with [$]CC(C)(C(=O)O-R)[$] structure polyvinyl_ethers a polymer with [$]CC(OR)[$] structure polyvinyl_esters a polymer with [$]CC(OC(=O)-R)[$] structure polyesters a polymer with R-C(=O)O-R within the backbone polycarbonates a polymer with R-O-C(=O)O-R within the backbone polyethers a polymer with R-O-R within the backbone polyanydrides a polymer with R-C(=O)-O-C(=O)-R within the backbone polyketones a polymer with R-C(=O)-R with the backbone polyamines a polymer with R-N(R)-R within the backbone polyurethanes a polymer with R-N(R)-C(=O)O-R within the backbone polyamides a polymer with R-C(=O)N(R)-R within the backbone polyureas a polymer with R-N(R)-C(=O)-N(R)-R within the backbone silicones a polymer with R-Si(R)(R)-R within the backbone polysulfides a polymer with R-S-R within the backbone polysulfones a polymer with R-S(=O)(=O)-R within the backbone polysulfoxides a polymer with R-S(=O)-R within the backbone polythiophenes a polymer with C=C1=CC=CS1 5 member ring within the backbone polyphosphazenes a polymer with R-P(R)(R)=N-R within the backbone conjugated_poly a polymer with delocalized electrons in the p orbital along the backbone","title":"Keywords"},{"location":"data-models/Materials_P/#example","text":"Example","title":"Example"},{"location":"data-models/Model_lake/","text":"Model Lake \u00b6 under construction Modules are computation nodes. They input a data node, preform a mathematical operation, and result in either another 'processed' data node or a material property. Example \u00b6 red are data nodes gray are module nodes output is properties in a material node","title":"Model Lake"},{"location":"data-models/Model_lake/#model-lake","text":"under construction Modules are computation nodes. They input a data node, preform a mathematical operation, and result in either another 'processed' data node or a material property.","title":"Model Lake"},{"location":"data-models/Model_lake/#example","text":"red are data nodes gray are module nodes output is properties in a material node","title":"Example"},{"location":"data-models/Polymers/","text":"Challenges of Polymer Data \u00b6 Polymers are large stochastic molecules which can assemble in hierarchical structures depending on processing conditions. Ultimately, this means that there is no single representation that can capture the full molecular detail of a polymer material. This lack of a single identifier provides a significant challenge for large scale data analysis. Polymers are a result of a system of stochastic reactions. This leads to distributions in chain length, composition, and topology making it impossible to completely represent a polymer in a single quantity. The combination of a structural description (like a chemical drawing or bigSMILES), and distribution information would be required to completely define the identity of a polymer. In practice, moments of distributions (average molecular weight) or ratio of composition are provided to approximately define a polymer as they are easier to work with and experimentally obtain. Moreover, data collection methods are highly variable, and typically provide relative structure information and/or use of theoretical models which requires expert knowledge to put into context. In some cases experimentally obtaining structural information is impossible, and information from prior processing steps is needed. To complicate the matters further, polymers can assemble into a wide range of structures through phenomena like phase segregation and crystallization. The formation of these structures can be highly influenced by the processing conditioning under which the material was made. Ultimately, this makes polymer-informatics messy as datasets that do not completely capture all the relevant polymer data will be incapable of providing reliable data and hindering large data science efforts. Comparison to small molecules \u00b6 Molecule-property tuple/pair style of data storage relates desired properties with the structures of a molecule. Data in this format fits naturally into widely available and well-supported database technologies, which store data in a series of tables relating molecular properties with the corresponding chemical descriptors. Assimilating data from different sources is straightforward as the chemical descriptors can be used unambiguously to define the chemical system and provide a handle to collate and aggregate distinct instances of data for the same chemical object. For most molecules, this information is conveniently encoded with representations that detail their chemical connectivity, such as SMILES ( simplified molecular-input line-entry system ) strings for organic molecules, nucleic acid sequences for RNA, or amino acid sequences for proteins. Natural Language Processing (NLP) for polymer data \u00b6 With almost a 100 years of exploration into polymers, the scientific community has amassed vast amounts of data; however this data is mostly locked up in journal articles and scientific reports which are not accessible for big data applications. To get access to this data, CRIPT is in the midst of developing a new AI text-based extraction tools. Extracting polymer information with natural language processing (NLP) is very challenging and this challenge is even larger for polymers than small molecules because there is no uniform nomenclature (typically generic terminology used), figures of polymer structure are extremely high variability, and ultimately a combination of figures, raw data, generic terminology and expert knowledge are all needs to define a polymer structure and to put into context. Thus, hindering the generation of reliable databases from prior literature. Nevertheless, the CRIPT initiative seeks to create the tools to address this challenge. Current Polymer Databases \u00b6 Currently, for most available datasets, polymer entries are identified through names of the polymers and lack complete characterization data. This leads to ambiguity and incompleteness in molecular structure specification. Bicerano, J., Prediction of Polymer Properties, 3rd Edition. CRC Press: 2002, DOI: 10.1201/9780203910115 . Brandrup, J.; Immergut, E. H.; Grulke, E. A.; Abe, A.; Bloch, D. R., Polymer Handbook . Wiley New York: 1999. Polymer Property Predictor and Database. http://pppdb.uchicago.edu/ Otsuka, S.; Kuwajima, I.; Hosoya, J.; Xu, Y.; Yamazaki, M. PoLyInfo : Polymer Database for Polymeric Materials Design. 2011, IEEE, 22\u2013 29, DOI: 10.1109/EIDWT.2011.13. Mark, J. E., Physical Properties of Polymers Handbook. Springer: 2007, DOI: 10.1007/978-0-387-69002-5 . CHEMnetBASE - Polymers: a Property Database. http://poly.chemnetbase.com/faces/polymers/PolymerSearch.xhtml NanoMine. http://materialsmine.org/nm Chemical Retrieval on the Web (CROW) https://www.polymerdatabase.com/ Polymer Genome https://www.polymergenome.org/ Other Material Data Models \u00b6 The CRIPT data structure was not the first design to address the complexities of polymer material data storage. PolyDAT and GEMD were both previouslyed develop and were a large inspiration to the CRIPT data structure. PolyDAT J. Chem. Inf. Model. 2021, doi: 10.1021/acs.jcim.1c00028 PolyDAT is a schema developed by a team led by Brad Olsen at MIT and focuses on specifying the molecular structures of polymers and associate chemical characterization. The schema was designed around a single document based schema that is well suited for publication supporting information. GEMD https://citrineinformatics.github.io/gemd-docs/ GEMD is a schema developed by Citrine Informatics to model materials and associated data. GEMD stands for Graphical Expression of Materials Data. The schema was designed around data objects making it well suited for large database projects.","title":"Challenges of Polymer Data"},{"location":"data-models/Polymers/#challenges-of-polymer-data","text":"Polymers are large stochastic molecules which can assemble in hierarchical structures depending on processing conditions. Ultimately, this means that there is no single representation that can capture the full molecular detail of a polymer material. This lack of a single identifier provides a significant challenge for large scale data analysis. Polymers are a result of a system of stochastic reactions. This leads to distributions in chain length, composition, and topology making it impossible to completely represent a polymer in a single quantity. The combination of a structural description (like a chemical drawing or bigSMILES), and distribution information would be required to completely define the identity of a polymer. In practice, moments of distributions (average molecular weight) or ratio of composition are provided to approximately define a polymer as they are easier to work with and experimentally obtain. Moreover, data collection methods are highly variable, and typically provide relative structure information and/or use of theoretical models which requires expert knowledge to put into context. In some cases experimentally obtaining structural information is impossible, and information from prior processing steps is needed. To complicate the matters further, polymers can assemble into a wide range of structures through phenomena like phase segregation and crystallization. The formation of these structures can be highly influenced by the processing conditioning under which the material was made. Ultimately, this makes polymer-informatics messy as datasets that do not completely capture all the relevant polymer data will be incapable of providing reliable data and hindering large data science efforts.","title":"Challenges of Polymer Data"},{"location":"data-models/Polymers/#comparison-to-small-molecules","text":"Molecule-property tuple/pair style of data storage relates desired properties with the structures of a molecule. Data in this format fits naturally into widely available and well-supported database technologies, which store data in a series of tables relating molecular properties with the corresponding chemical descriptors. Assimilating data from different sources is straightforward as the chemical descriptors can be used unambiguously to define the chemical system and provide a handle to collate and aggregate distinct instances of data for the same chemical object. For most molecules, this information is conveniently encoded with representations that detail their chemical connectivity, such as SMILES ( simplified molecular-input line-entry system ) strings for organic molecules, nucleic acid sequences for RNA, or amino acid sequences for proteins.","title":"Comparison to small molecules"},{"location":"data-models/Polymers/#natural-language-processing-nlp-for-polymer-data","text":"With almost a 100 years of exploration into polymers, the scientific community has amassed vast amounts of data; however this data is mostly locked up in journal articles and scientific reports which are not accessible for big data applications. To get access to this data, CRIPT is in the midst of developing a new AI text-based extraction tools. Extracting polymer information with natural language processing (NLP) is very challenging and this challenge is even larger for polymers than small molecules because there is no uniform nomenclature (typically generic terminology used), figures of polymer structure are extremely high variability, and ultimately a combination of figures, raw data, generic terminology and expert knowledge are all needs to define a polymer structure and to put into context. Thus, hindering the generation of reliable databases from prior literature. Nevertheless, the CRIPT initiative seeks to create the tools to address this challenge.","title":"Natural Language Processing (NLP) for polymer data"},{"location":"data-models/Polymers/#current-polymer-databases","text":"Currently, for most available datasets, polymer entries are identified through names of the polymers and lack complete characterization data. This leads to ambiguity and incompleteness in molecular structure specification. Bicerano, J., Prediction of Polymer Properties, 3rd Edition. CRC Press: 2002, DOI: 10.1201/9780203910115 . Brandrup, J.; Immergut, E. H.; Grulke, E. A.; Abe, A.; Bloch, D. R., Polymer Handbook . Wiley New York: 1999. Polymer Property Predictor and Database. http://pppdb.uchicago.edu/ Otsuka, S.; Kuwajima, I.; Hosoya, J.; Xu, Y.; Yamazaki, M. PoLyInfo : Polymer Database for Polymeric Materials Design. 2011, IEEE, 22\u2013 29, DOI: 10.1109/EIDWT.2011.13. Mark, J. E., Physical Properties of Polymers Handbook. Springer: 2007, DOI: 10.1007/978-0-387-69002-5 . CHEMnetBASE - Polymers: a Property Database. http://poly.chemnetbase.com/faces/polymers/PolymerSearch.xhtml NanoMine. http://materialsmine.org/nm Chemical Retrieval on the Web (CROW) https://www.polymerdatabase.com/ Polymer Genome https://www.polymergenome.org/","title":"Current Polymer Databases"},{"location":"data-models/Polymers/#other-material-data-models","text":"The CRIPT data structure was not the first design to address the complexities of polymer material data storage. PolyDAT and GEMD were both previouslyed develop and were a large inspiration to the CRIPT data structure. PolyDAT J. Chem. Inf. Model. 2021, doi: 10.1021/acs.jcim.1c00028 PolyDAT is a schema developed by a team led by Brad Olsen at MIT and focuses on specifying the molecular structures of polymers and associate chemical characterization. The schema was designed around a single document based schema that is well suited for publication supporting information. GEMD https://citrineinformatics.github.io/gemd-docs/ GEMD is a schema developed by Citrine Informatics to model materials and associated data. GEMD stands for Graphical Expression of Materials Data. The schema was designed around data objects making it well suited for large database projects.","title":"Other Material Data Models"},{"location":"data-models/Process/","text":"Process \u00b6 The 'process' node contains ingredient list, quantities, and procedure information. A process can be anything from a reaction, reaction + separation, reactive extrusion. Typically, a process results in a change in the identity or property . Features: process node points to materials and data required information name ingredient (material CRIPT node) procedure optional information data (CRIPT node) conditions properties keywords history note auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: allow additional optional information in cond section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"process\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date_created\" : da tet ime , \"date_last_mod\" : da tet ime , \"name\" : s tr i n g , \"ingredients\" : [ \"see ingredients for details\" ], \"procedure\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" date_created datetime auto datetime created date_last_mod datetime auto last modified datetime name string required name of process ingredients list[dict] required see ingredients section procedure string required written procedure for the process Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data conditions list[dict] see conditions section properties list[dict] see properties section keywords list[string] see keywords section below history dict processing history note string free-form space to store any text Ingredients \u00b6 Ingredients are originally defined as a material node and linked here. A minimum of 1 quantity is required, and type is optional. List of supported quantities (quant), units and valid ranges. Units are not stored as all values are converted to database standard prior to storage. { \"_id\" : objec t Id() , \"name\" : s tr i n g , \"type\" : s tr i n g , \"quantities\" : [ { \"key\" : s tr i n g , \"value\" : double , \"uncer\" : double } ] } type Description monomer the major chemical to be incorporated into a repeating unit of a polymer polymer a chemical that consists of a large number of similar units bonded together initiator a chemical which starts the growth of a polymer catalyst a chemical that increases the rate of a chemical reaction solvent an inert liquid that facilitates a reaction cta chain transfer agent, a chemical added to the reaction resulting in the exchange of the propagating site quench a chemical which terminates the chemical reaction reagent a chemical which is chemical reacts during the course of the process workup a chemical used in the purification or isolation of a polymer Quantities \u00b6 Key Units Range Description mass g [0, 1.79e+308] mass volume ml [0, 1.79e+308] volume pressure kPa [0, 1.79e+308] partial pressure mole mmol [0, 1.79e+308] mole equivalence [0, 1.79e+308] equivalence mass_fraction [0, 1] mass fraction; = mass of ingredient / (mass of all ingredients) mole_fraction [0, 1] mole fraction; = mole of ingredient / (moles of all ingredients) vol_fraction [0, 1] volume fraction; = volume of ingredient / (volume of all ingredients) Conditions \u00b6 Conditions are any process variable that the user would like to explicitly expose. Conditions such as temperature, pressure, or reaction times are examples. The conditions are stored in a dictionary. Units are only used for user defined attributes which begin with a + . For complex data sets or time series, users are encouraged to put that information into a data node. { \"key\" : s tr i n g , \"value\" : [ double ], \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } key Units Description time min time temperature degC temperature pressure kPa pressure (absolute) inert bool [1 - inert, 0 - Not inert]; reaction occurred under an inert atmosphere (N2, Ar) light_power watt light power light_power_area mwatt cm *-2 irradiance light_wlength nm wave length of light stirring rpm revolutions per minute for stirrer potential volt electrical potential Properties \u00b6 Properties consist of the following structure: { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } A complete list of methods can be found here Key Method Range Units Description conv_mon ['nmr', 'sec'] [0, 1.2] None how much monomer that has reacted conv_init ['nmr', 'sec'] [0, 1.2] None how much initiator that has reacted init_eff ['nmr', 'sec'] [0, 1.2] None The proportion of initiators that result in an active propagating species selectivity ['nmr', 'sec'] [0, 1.79e+308] None selectivity yield ['nmr', 'sec'] [0, 1.2] None yield yield_mass ['scale'] [0, 1.79e+308] g yield by mass rate_const [] [-1.79e+308, 1.79e+308] user-define rate constant Keywords \u00b6 Keywords are an optional field that allow users to classify the experiment. Selecting multiple keywords is allowed. Keyword Description chemical transformations polymerization a chemical reaction that convert monomer(s) to a polymer kinetics an experiment were multiple data points are take over a span of time chain_growth chain growth polymerization step_growth step-growth polymerization post_poly_mod a chemical reaction preformed on a polymer to modify the chemical functionality living_poly living polymerization controlled_poly a polymerization that produce narrowly dispersed polymers (\u00d0<1.2) immortal_poly a polymerization where chain transfer reaction and termination is reversible radical_poly Free radical polymerization rop ring-opening polymerization (excluding ROMP) romp ring-opening metathesis polymerization atrp atom transfer radical polymerization nmp nitroxide-mediated radical polymerization raft reversible addition\u2212fragmentation chain-transfer polymerization anionic anionic addition polymerization cationic cationic polymerization insertion coordination insertion polymerization lewis-pairs a polymerization that employs a Lewis acid and a Lewis base to activate/initiate the polymerization group-transfer a polymerization that proceeds through the repetitive Michael addition bulk bulk polymerization emulsion emulsion polymerization suspension suspension polymerization solution solution polymerization interfacial interfacial polymerization physical transformations reactive_processing extrusion blow_molding self_assembly curing forming coating annealing sol_annealing Process history \u00b6 Under construction The process history is a feature in development. The feature will take the procedure given by an user and convert it into an expand-graph detailing intermediate steps. This feature will be powered by a NLP algorithm that is under development. Example \u00b6 Example","title":"Process"},{"location":"data-models/Process/#process","text":"The 'process' node contains ingredient list, quantities, and procedure information. A process can be anything from a reaction, reaction + separation, reactive extrusion. Typically, a process results in a change in the identity or property . Features: process node points to materials and data required information name ingredient (material CRIPT node) procedure optional information data (CRIPT node) conditions properties keywords history note auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: allow additional optional information in cond section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage","title":"Process"},{"location":"data-models/Process/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"process\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date_created\" : da tet ime , \"date_last_mod\" : da tet ime , \"name\" : s tr i n g , \"ingredients\" : [ \"see ingredients for details\" ], \"procedure\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Process/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" date_created datetime auto datetime created date_last_mod datetime auto last modified datetime name string required name of process ingredients list[dict] required see ingredients section procedure string required written procedure for the process","title":"Description"},{"location":"data-models/Process/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data conditions list[dict] see conditions section properties list[dict] see properties section keywords list[string] see keywords section below history dict processing history note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Process/#ingredients","text":"Ingredients are originally defined as a material node and linked here. A minimum of 1 quantity is required, and type is optional. List of supported quantities (quant), units and valid ranges. Units are not stored as all values are converted to database standard prior to storage. { \"_id\" : objec t Id() , \"name\" : s tr i n g , \"type\" : s tr i n g , \"quantities\" : [ { \"key\" : s tr i n g , \"value\" : double , \"uncer\" : double } ] } type Description monomer the major chemical to be incorporated into a repeating unit of a polymer polymer a chemical that consists of a large number of similar units bonded together initiator a chemical which starts the growth of a polymer catalyst a chemical that increases the rate of a chemical reaction solvent an inert liquid that facilitates a reaction cta chain transfer agent, a chemical added to the reaction resulting in the exchange of the propagating site quench a chemical which terminates the chemical reaction reagent a chemical which is chemical reacts during the course of the process workup a chemical used in the purification or isolation of a polymer","title":"Ingredients"},{"location":"data-models/Process/#conditions","text":"Conditions are any process variable that the user would like to explicitly expose. Conditions such as temperature, pressure, or reaction times are examples. The conditions are stored in a dictionary. Units are only used for user defined attributes which begin with a + . For complex data sets or time series, users are encouraged to put that information into a data node. { \"key\" : s tr i n g , \"value\" : [ double ], \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } key Units Description time min time temperature degC temperature pressure kPa pressure (absolute) inert bool [1 - inert, 0 - Not inert]; reaction occurred under an inert atmosphere (N2, Ar) light_power watt light power light_power_area mwatt cm *-2 irradiance light_wlength nm wave length of light stirring rpm revolutions per minute for stirrer potential volt electrical potential","title":"Conditions"},{"location":"data-models/Process/#properties","text":"Properties consist of the following structure: { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } A complete list of methods can be found here Key Method Range Units Description conv_mon ['nmr', 'sec'] [0, 1.2] None how much monomer that has reacted conv_init ['nmr', 'sec'] [0, 1.2] None how much initiator that has reacted init_eff ['nmr', 'sec'] [0, 1.2] None The proportion of initiators that result in an active propagating species selectivity ['nmr', 'sec'] [0, 1.79e+308] None selectivity yield ['nmr', 'sec'] [0, 1.2] None yield yield_mass ['scale'] [0, 1.79e+308] g yield by mass rate_const [] [-1.79e+308, 1.79e+308] user-define rate constant","title":"Properties"},{"location":"data-models/Process/#process-history","text":"Under construction The process history is a feature in development. The feature will take the procedure given by an user and convert it into an expand-graph detailing intermediate steps. This feature will be powered by a NLP algorithm that is under development.","title":"Process history"},{"location":"data-models/Process/#example","text":"Example","title":"Example"},{"location":"data-models/Publications/","text":"Publications \u00b6 The 'publication' node contains data related to a publication. Publications point to a collection of experiments that no longer have write or append options. Features: publication can reference collections required information title optional information collections (CRIPT nodes) title authors journal publisher year vol issue pages doi issn arxiv_id PMID website notes auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"publication\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"title\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created title string required publication title Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description collection list[dict] collection nodes collection\\_id objectId() id of collection collection\\name string name of collection collection\\created datetime date collection created authors list[string] authors journal string journal publisher string publisher year integer publishing year vol integer volume number issue integer issue number pages string page number doi string DOI: digital object identifier issn string ISSN: international standard serial number arxiv_id string arXiv identifier PMID string PubMed ID web string publication website note string free-form space to store any text Example \u00b6 Publication Example","title":"Publications"},{"location":"data-models/Publications/#publications","text":"The 'publication' node contains data related to a publication. Publications point to a collection of experiments that no longer have write or append options. Features: publication can reference collections required information title optional information collections (CRIPT nodes) title authors journal publisher year vol issue pages doi issn arxiv_id PMID website notes auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child)","title":"Publications"},{"location":"data-models/Publications/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"publication\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"title\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Publications/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created title string required publication title","title":"Description"},{"location":"data-models/Publications/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description collection list[dict] collection nodes collection\\_id objectId() id of collection collection\\name string name of collection collection\\created datetime date collection created authors list[string] authors journal string journal publisher string publisher year integer publishing year vol integer volume number issue integer issue number pages string page number doi string DOI: digital object identifier issn string ISSN: international standard serial number arxiv_id string arXiv identifier PMID string PubMed ID web string publication website note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Publications/#example","text":"Publication Example","title":"Example"},{"location":"data-models/Sample/","text":"Sample \u00b6 The 'sample' node contains procedure and property information. A sample can be anything from that doesn't result in a change in the \"identity\" or properties. Features: sample node points to data required information name procedure optional information data (CRIPT node) conditions properties note auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: allow additional optional information in cond section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"sample\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date_created\" : da tet ime , \"date_last_mod\" : da tet ime , \"name\" : s tr i n g , \"procedure\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" date_created datetime auto datetime created date_last_mod datetime auto last modified datetime name string required name of process procedure string required written procedure for the process Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data condition list[dict] see condition section properties list[dict] see properties section note string free-form space to store any text Conditions \u00b6 Conditions are any process variable that the user would like to explicitly expose. Conditions such as temperature, pressure, or reaction times are examples. The conditions are stored in a dictionary. Units are only used for user defined attributes which begin with a + . { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } key Units Description time min time temperature degC temperature pressure kPa pressure (absolute) Properties \u00b6 For information on properties see Materials node Example \u00b6 { \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"process\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], }","title":"Sample"},{"location":"data-models/Sample/#sample","text":"The 'sample' node contains procedure and property information. A sample can be anything from that doesn't result in a change in the \"identity\" or properties. Features: sample node points to data required information name procedure optional information data (CRIPT node) conditions properties note auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: allow additional optional information in cond section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage","title":"Sample"},{"location":"data-models/Sample/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"sample\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date_created\" : da tet ime , \"date_last_mod\" : da tet ime , \"name\" : s tr i n g , \"procedure\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Sample/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" date_created datetime auto datetime created date_last_mod datetime auto last modified datetime name string required name of process procedure string required written procedure for the process","title":"Description"},{"location":"data-models/Sample/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data condition list[dict] see condition section properties list[dict] see properties section note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Sample/#conditions","text":"Conditions are any process variable that the user would like to explicitly expose. Conditions such as temperature, pressure, or reaction times are examples. The conditions are stored in a dictionary. Units are only used for user defined attributes which begin with a + . { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } key Units Description time min time temperature degC temperature pressure kPa pressure (absolute)","title":"Conditions"},{"location":"data-models/Sample/#properties","text":"For information on properties see Materials node","title":"Properties"},{"location":"data-models/Sample/#example","text":"{ \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"process\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], }","title":"Example"},{"location":"data-models/Simulation/","text":"Simulation \u00b6 Under Construction The 'simulation' node contains .... Features: required information name optional information notes auto generate: _id class version_schema version_control (& all child) <-- update with version control node JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"material_p\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"name\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node; \"material_p\" version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of chemical Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Units Description keywords list[string] see keywords section below Keywords \u00b6 Keywords are an optional field that allow users to classify the material. Selecting multiple keywords is allowed. Keyword Description Example \u00b6","title":"Simulation"},{"location":"data-models/Simulation/#simulation","text":"Under Construction The 'simulation' node contains .... Features: required information name optional information notes auto generate: _id class version_schema version_control (& all child) <-- update with version control node","title":"Simulation"},{"location":"data-models/Simulation/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"material_p\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"name\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Simulation/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node; \"material_p\" version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of chemical","title":"Description"},{"location":"data-models/Simulation/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Units Description keywords list[string] see keywords section below","title":"Attributes"},{"location":"data-models/Simulation/#keywords","text":"Keywords are an optional field that allow users to classify the material. Selecting multiple keywords is allowed. Keyword Description","title":"Keywords"},{"location":"data-models/Simulation/#example","text":"","title":"Example"},{"location":"data-models/Users/","text":"User \u00b6 The 'user' node contains data related to the user. Anyone who interacts with the database can be a user. Features: user can reference groups, collections, publications, and experiments required information name email optional information group (CRIPT node) publications (CRIPT node) phone website twitter handle ORCID # organization notes auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: name, email, etc a tool to look up group, or enter _id a similar look up tool for experiments, collections, and publications allow additional optional information in attribute section given that it begins with + JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"user\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"name\" : s tr i n g , \"email\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of user email string required user email address Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description owns_groups list[dict] groups that the user owns owns_groups\\_id objectId() id of group owns_groups\\name string name of group in_groups list[dict] groups that the user belongs to in_groups\\_id objectId() id of group in_groups\\name string name of group publication list[dict] publications the user authored publication\\_id objectId() id of publication publication\\title string title of publication phone string phone number (###-###-####) web string website twitter string twitter handle orcid string ORCID number organization string author's organization position string author's position in organization note string free-form space to store any text Example \u00b6 User Example","title":"Users"},{"location":"data-models/Users/#user","text":"The 'user' node contains data related to the user. Anyone who interacts with the database can be a user. Features: user can reference groups, collections, publications, and experiments required information name email optional information group (CRIPT node) publications (CRIPT node) phone website twitter handle ORCID # organization notes auto generate/update: _id class version_schema version_control (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: name, email, etc a tool to look up group, or enter _id a similar look up tool for experiments, collections, and publications allow additional optional information in attribute section given that it begins with +","title":"User"},{"location":"data-models/Users/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"user\" , \"version_schema\" : s tr i n g , \"version_control\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"last_modified\" : da tet ime , \"created\" : da tet ime , \"name\" : s tr i n g , \"email\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Users/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node version_schema string auto schema version; Ex: \"v0.1\" version_control version control object version_control/_id objectId() auto reference id to node history version_control/num string auto type of node ; Ex: \"group\" last_modified datetime auto last modified datetime created datetime auto datetime created name string required name of user email string required user email address","title":"Description"},{"location":"data-models/Users/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description owns_groups list[dict] groups that the user owns owns_groups\\_id objectId() id of group owns_groups\\name string name of group in_groups list[dict] groups that the user belongs to in_groups\\_id objectId() id of group in_groups\\name string name of group publication list[dict] publications the user authored publication\\_id objectId() id of publication publication\\title string title of publication phone string phone number (###-###-####) web string website twitter string twitter handle orcid string ORCID number organization string author's organization position string author's position in organization note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Users/#example","text":"User Example","title":"Example"},{"location":"data-models/Version_Control/","text":"Version Control \u00b6 The version control implemented in CRIPT is JSON Patch . JSON Patch is a format for describing changes to a JSON document. Using a patch approach avoids saving the whole document when only a part of it has changed. The file can only be created and appended to; no deletions allowed. JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"vs_###\" , \"ver_sch\" : s tr i n g , \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"id_child\" : objec t Id() , \"patches\" : [ { \"_id\" : objec t Id() \", \" na me_ \": string, \" da te \": datetime, \" n o tes \": string, \" ver_ nu m \": string, \" cha n ges \": [ {\" op \": string, \" pa t h \": string, \" value\": any} ] } ] } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id type string auto type of node ; Ex: \"group\" ver_sch string auto schema version; Ex: \"v0.1\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime id_child objectId() auto id of node that the file is storing patches for patches document history patches/_id string auto id of user who made change patches/name string auto name of user who made change patches/data datetime auto date and time when changes were made patches/notes string optional notes about change patches/ver_num string auto version number of patch patches/changes dict auto JSON Patch Example \u00b6 { \"_id\" : \"507f191e810c19729de861ec\" , \"class\" : \"vs_mat\" , \"ver_sch\" : \"v0.1\" , \"date\" : [ { \"created\" : 1612881183 }, { \"last_mod\" : 1612881123 } ], \"id_child\" : \"507f191e810c19729de861ec\" , \"patches\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name_\" : \"Dylan W\" , \"date\" : 1612881123 , \"notes\" : \"updating material data\" , \"ver_num\" : \"v0.2\" , \"changes\" : [ { \"op\" : \"replace\" , \"path\" : \"/proc/0/role\" , \"value\" : [ \"prod\" ]}, { \"op\" : \"add\" , \"path\" : \"/iden/cas\" , \"value\" : \"9003-53-6\" }, { \"op\" : \"remove\" , \"path\" : \"/prop/3\" } ] }, { \"_iduser\" : \"507f191e810c19729de860ec\" , \"name_user\" : \"Dylan W\" , \"date\" : 1612881126 , \"notes\" : \"updating material data again\" , \"ver_num\" : \"v0.3\" , \"changes\" : [ { \"op\" : \"replace\" , \"path\" : \"/prop/1/value\" , \"value\" : 5200 }, { \"op\" : \"add\" , \"path\" : \"/prop\" , \"value\" : { \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncertainty\" : 0.02 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"sec\" }} } }, { \"op\" : \"remove\" , \"path\" : \"/data/2\" } ] } ] }","title":"Version Control"},{"location":"data-models/Version_Control/#version-control","text":"The version control implemented in CRIPT is JSON Patch . JSON Patch is a format for describing changes to a JSON document. Using a patch approach avoids saving the whole document when only a part of it has changed. The file can only be created and appended to; no deletions allowed.","title":"Version Control"},{"location":"data-models/Version_Control/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"vs_###\" , \"ver_sch\" : s tr i n g , \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"id_child\" : objec t Id() , \"patches\" : [ { \"_id\" : objec t Id() \", \" na me_ \": string, \" da te \": datetime, \" n o tes \": string, \" ver_ nu m \": string, \" cha n ges \": [ {\" op \": string, \" pa t h \": string, \" value\": any} ] } ] }","title":"JSON Schema"},{"location":"data-models/Version_Control/#description","text":"Key Data Type Required Description _id objectId() auto unique database id type string auto type of node ; Ex: \"group\" ver_sch string auto schema version; Ex: \"v0.1\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime id_child objectId() auto id of node that the file is storing patches for patches document history patches/_id string auto id of user who made change patches/name string auto name of user who made change patches/data datetime auto date and time when changes were made patches/notes string optional notes about change patches/ver_num string auto version number of patch patches/changes dict auto JSON Patch","title":"Description"},{"location":"data-models/Version_Control/#example","text":"{ \"_id\" : \"507f191e810c19729de861ec\" , \"class\" : \"vs_mat\" , \"ver_sch\" : \"v0.1\" , \"date\" : [ { \"created\" : 1612881183 }, { \"last_mod\" : 1612881123 } ], \"id_child\" : \"507f191e810c19729de861ec\" , \"patches\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name_\" : \"Dylan W\" , \"date\" : 1612881123 , \"notes\" : \"updating material data\" , \"ver_num\" : \"v0.2\" , \"changes\" : [ { \"op\" : \"replace\" , \"path\" : \"/proc/0/role\" , \"value\" : [ \"prod\" ]}, { \"op\" : \"add\" , \"path\" : \"/iden/cas\" , \"value\" : \"9003-53-6\" }, { \"op\" : \"remove\" , \"path\" : \"/prop/3\" } ] }, { \"_iduser\" : \"507f191e810c19729de860ec\" , \"name_user\" : \"Dylan W\" , \"date\" : 1612881126 , \"notes\" : \"updating material data again\" , \"ver_num\" : \"v0.3\" , \"changes\" : [ { \"op\" : \"replace\" , \"path\" : \"/prop/1/value\" , \"value\" : 5200 }, { \"op\" : \"add\" , \"path\" : \"/prop\" , \"value\" : { \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncertainty\" : 0.02 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"sec\" }} } }, { \"op\" : \"remove\" , \"path\" : \"/data/2\" } ] } ] }","title":"Example"},{"location":"data-models/ideas/","text":"A file to write new ideas: To speed up search of final polymers: * Add index for the final materials? To speed up search of monomer: * hash table","title":"Ideas"},{"location":"software-tools/","text":"CRIPT API \u00b6 Documentation of the Python-based API to represent, store, search, and retrieve polymers data within CRIPT. Under Construction \u00b6","title":"CRIPT API"},{"location":"software-tools/#cript-api","text":"Documentation of the Python-based API to represent, store, search, and retrieve polymers data within CRIPT.","title":"CRIPT API"},{"location":"software-tools/#under-construction","text":"","title":"Under Construction"},{"location":"web-application/","text":"CRIPT Web Application \u00b6 Documentation of the CRIPT web application and related user interfaces. Under Construction \u00b6","title":"CRIPT Web Application"},{"location":"web-application/#cript-web-application","text":"Documentation of the CRIPT web application and related user interfaces.","title":"CRIPT Web Application"},{"location":"web-application/#under-construction","text":"","title":"Under Construction"}]}